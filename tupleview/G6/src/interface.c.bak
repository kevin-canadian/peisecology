/*
 * DO NOT EDIT THIS FILE - it is generated by Glade.
 */

#ifdef HAVE_CONFIG_H
#  include <config.h>
#endif

#include <sys/types.h>
#include <sys/stat.h>
#include <unistd.h>
#include <string.h>
#include <stdio.h>

#include <gdk/gdkkeysyms.h>
#include <gtk/gtk.h>

#include "callbacks.h"
#include "interface.h"
#include "support.h"

#define GLADE_HOOKUP_OBJECT(component,widget,name) \
  g_object_set_data_full (G_OBJECT (component), name, \
    gtk_widget_ref (widget), (GDestroyNotify) gtk_widget_unref)

#define GLADE_HOOKUP_OBJECT_NO_REF(component,widget,name) \
  g_object_set_data (G_OBJECT (component), name, widget)

GtkWidget*
create_mainwindow (void)
{
  GtkWidget *mainwindow;
  GtkWidget *MenuMainStatusArea;
  GtkWidget *menubar;
  GtkWidget *menuitem1;
  GtkWidget *menuitem1_menu;
  GtkWidget *save_tuple;
  GtkWidget *image21;
  GtkWidget *save_image;
  GtkWidget *image22;
  GtkWidget *separatormenuitem1;
  GtkWidget *quit;
  GtkWidget *menuitem2;
  GtkWidget *menuitem2_menu;
  GtkWidget *cut1;
  GtkWidget *copy1;
  GtkWidget *paste1;
  GtkWidget *delete1;
  GtkWidget *preferencesMenu;
  GtkWidget *image23;
  GtkWidget *menuitem3;
  GtkWidget *menuEcology;
  GtkWidget *menuEcology_menu;
  GtkWidget *menuConnect;
  GtkWidget *image24;
  GtkWidget *menuitem4;
  GtkWidget *menuitem4_menu;
  GtkWidget *about1;
  GtkWidget *notebook1;
  GtkWidget *TupleTreeContentArea;
  GtkWidget *tupleTree;
  GtkWidget *peistreeview;
  GtkWidget *tupleContentArea;
  GtkWidget *tupleInfoFrame;
  GtkWidget *alignment3;
  GtkWidget *table2;
  GtkWidget *hbox1;
  GtkWidget *label3;
  GtkWidget *creatorEntry;
  GtkWidget *tsExpireEntry2;
  GtkWidget *tsExpireEntry;
  GtkWidget *tsExpireLabel;
  GtkWidget *tsUserLabel1;
  GtkWidget *tsWriteLabel1;
  GtkWidget *tupleKeyLabel;
  GtkWidget *componentIDlabel1;
  GtkWidget *tsUserEntry;
  GtkWidget *tsUserEntry2;
  GtkWidget *tsWriteEntry2;
  GtkWidget *tsWriteEntry;
  GtkWidget *tupleKeyEntry;
  GtkWidget *ownerEntry;
  GtkWidget *tupleInfoLabel;
  GtkWidget *tupleViewNoteBook;
  GtkWidget *tupleTextPane;
  GtkWidget *currentValueFrame;
  GtkWidget *alignment1;
  GtkWidget *scrolledwindow1;
  GtkWidget *currentValueTextView;
  GtkWidget *currentValueLabel;
  GtkWidget *vbox2;
  GtkWidget *hbox2;
  GtkWidget *submitButton;
  GtkWidget *alignment5;
  GtkWidget *hbox4;
  GtkWidget *image7;
  GtkWidget *label2;
  GtkWidget *grabButton;
  GtkWidget *alignment4;
  GtkWidget *hbox3;
  GtkWidget *image6;
  GtkWidget *label1;
  GtkWidget *editValueFrame;
  GtkWidget *alignment2;
  GtkWidget *vbox9;
  GtkWidget *table3;
  GtkWidget *tsExpireEntry22;
  GtkWidget *tsExpireEntry21;
  GtkWidget *tsUserEntry22;
  GtkWidget *tsUserEntry21;
  GtkWidget *ts_expireLabel2;
  GtkWidget *ts_userLabel2;
  GtkWidget *scrolledwindow2;
  GtkWidget *editValueTextView;
  GtkWidget *editValueLabel;
  GtkWidget *noteTabAsText;
  GtkWidget *hbox13;
  GtkWidget *tupleImageScrollWindow;
  GtkWidget *tupleImageViewport;
  GtkWidget *tupleDrawingArea;
  GtkWidget *ImageInfoVBox;
  GtkWidget *imageInfoInterfaceFrame;
  GtkWidget *alignment9;
  GtkWidget *imageInfoInterfaceVBox;
  GtkWidget *imageInfoClickableButton;
  GtkWidget *imageInfoKeyboardButton;
  GtkWidget *imageInfoInterfaceLabel;
  GtkWidget *ImageInfoPropFrame;
  GtkWidget *alignment8;
  GtkWidget *ImageInfoPropVBox;
  GtkWidget *imageInfoTypeHBox;
  GtkWidget *imageInfoTypeLabel;
  GtkWidget *imageInfoTypeText;
  GtkWidget *imageInfoSizeHBox;
  GtkWidget *imageInfoSizeLabel;
  GtkWidget *imageInfoSizeText;
  GtkWidget *imageInfoPropLabel;
  GtkWidget *imageInfoPosFrame;
  GtkWidget *alignment6;
  GtkWidget *vbox7;
  GtkWidget *imageInfoXYHBox;
  GtkWidget *imageInfoXYLabel;
  GtkWidget *imageInfoXYText;
  GtkWidget *imageInfoUVHBox;
  GtkWidget *imageInfoUVLabel;
  GtkWidget *imageInfoUVText;
  GtkWidget *label8;
  GtkWidget *imageInfoValFrame;
  GtkWidget *alignment7;
  GtkWidget *vbox8;
  GtkWidget *imageInfoRGBHBox;
  GtkWidget *imageInfoRGBlabel;
  GtkWidget *imageInfoRGBText;
  GtkWidget *imageInfoHSVHBox;
  GtkWidget *imageInfoHSVLabel;
  GtkWidget *imageInfoHSVText;
  GtkWidget *label9;
  GtkWidget *imageInfoSpaceLabel;
  GtkWidget *noteTabAsImage;
  GtkWidget *hbox17;
  GtkWidget *scrolledwindow3;
  GtkWidget *viewport1;
  GtkWidget *dotGraphDrawingArea;
  GtkWidget *vbox13;
  GtkWidget *frame3;
  GtkWidget *alignment12;
  GtkWidget *vbox14;
  GtkWidget *dotGraphDot_rb;
  GSList *dotGraphDot_rb_group = NULL;
  GtkWidget *dotGraphFdp_rb;
  GtkWidget *dotGraphCirco_rb;
  GtkWidget *label14;
  GtkWidget *frame4;
  GtkWidget *alignment13;
  GtkWidget *vbox15;
  GtkWidget *dotGraphPng_rb;
  GSList *dotGraphPng_rb_group = NULL;
  GtkWidget *dotGraphSvg_rb;
  GtkWidget *label15;
  GtkWidget *toolbar2;
  GtkIconSize tmp_toolbar_icon_size;
  GtkWidget *dotGraphZoomIn;
  GtkWidget *dotGraphZoomOut;
  GtkWidget *dotgraph_lbl;
  GtkWidget *tuplesLabel;
  GtkWidget *tpDivider;
  GtkWidget *toolbar1;
  GtkWidget *ecologyZoomIn;
  GtkWidget *ecologyZoomOut;
  GtkWidget *tmp_image;
  GtkWidget *ecologyDetailedNodes;
  GtkWidget *ecologyShowConnections;
  GtkWidget *ecologyShowSubscriptions;
  GtkWidget *ecologyShowTraffic;
  GtkWidget *toolitem1;
  GtkWidget *hbox18;
  GtkWidget *ecologyTrafficLabel0;
  GtkObject *ecologyTrafficThreshold_adj;
  GtkWidget *ecologyTrafficThreshold;
  GtkWidget *ecologyTrafficLabel;
  GtkWidget *ecologyClusterComponents;
  GtkWidget *toolitem2;
  GtkWidget *vbox16;
  GtkWidget *ecologyRoutingTableCombo;
  GtkWidget *ecologyRoutingTableLable;
  GtkWidget *topologyDrawingScrollWindow;
  GtkWidget *topologyDrawingViewport;
  GtkWidget *topologyDrawingArea;
  GtkWidget *topologyUpdatebar;
  GtkWidget *renderingEngine;
  GtkWidget *topologyUpdate;
  GtkWidget *topologyUpdateInterval;
  GtkWidget *ecologyProgressBar;
  GtkWidget *topologyCancel;
  GtkWidget *ecologyLabel;
  GtkWidget *statusHBox;
  GtkWidget *clockLabel;
  GtkWidget *statusbar;
  GtkAccelGroup *accel_group;
  GtkTooltips *tooltips;

  tooltips = gtk_tooltips_new ();

  accel_group = gtk_accel_group_new ();

  mainwindow = gtk_window_new (GTK_WINDOW_TOPLEVEL);
  gtk_window_set_title (GTK_WINDOW (mainwindow), _("Tupleview"));
  gtk_window_set_default_size (GTK_WINDOW (mainwindow), 400, 400);

  MenuMainStatusArea = gtk_vbox_new (FALSE, 0);
  gtk_widget_show (MenuMainStatusArea);
  gtk_container_add (GTK_CONTAINER (mainwindow), MenuMainStatusArea);

  menubar = gtk_menu_bar_new ();
  gtk_widget_show (menubar);
  gtk_box_pack_start (GTK_BOX (MenuMainStatusArea), menubar, FALSE, FALSE, 0);

  menuitem1 = gtk_menu_item_new_with_mnemonic (_("_File"));
  gtk_widget_show (menuitem1);
  gtk_container_add (GTK_CONTAINER (menubar), menuitem1);

  menuitem1_menu = gtk_menu_new ();
  gtk_menu_item_set_submenu (GTK_MENU_ITEM (menuitem1), menuitem1_menu);

  save_tuple = gtk_image_menu_item_new_with_mnemonic (_("Save Tuple"));
  gtk_widget_show (save_tuple);
  gtk_container_add (GTK_CONTAINER (menuitem1_menu), save_tuple);
  gtk_tooltips_set_tip (tooltips, save_tuple, _("Saves the data of the currently selected tuple to disk in a raw format"), NULL);

  image21 = gtk_image_new_from_stock ("gtk-save", GTK_ICON_SIZE_MENU);
  gtk_widget_show (image21);
  gtk_image_menu_item_set_image (GTK_IMAGE_MENU_ITEM (save_tuple), image21);

  save_image = gtk_image_menu_item_new_with_mnemonic (_("Save Tuple Image"));
  gtk_widget_show (save_image);
  gtk_container_add (GTK_CONTAINER (menuitem1_menu), save_image);
  gtk_tooltips_set_tip (tooltips, save_image, _("Saves the image part of the currently selected tuple if it is an image"), NULL);

  image22 = gtk_image_new_from_stock ("gtk-save", GTK_ICON_SIZE_MENU);
  gtk_widget_show (image22);
  gtk_image_menu_item_set_image (GTK_IMAGE_MENU_ITEM (save_image), image22);

  separatormenuitem1 = gtk_separator_menu_item_new ();
  gtk_widget_show (separatormenuitem1);
  gtk_container_add (GTK_CONTAINER (menuitem1_menu), separatormenuitem1);
  gtk_widget_set_sensitive (separatormenuitem1, FALSE);

  quit = gtk_image_menu_item_new_from_stock ("gtk-quit", accel_group);
  gtk_widget_show (quit);
  gtk_container_add (GTK_CONTAINER (menuitem1_menu), quit);

  menuitem2 = gtk_menu_item_new_with_mnemonic (_("_Edit"));
  gtk_widget_show (menuitem2);
  gtk_container_add (GTK_CONTAINER (menubar), menuitem2);

  menuitem2_menu = gtk_menu_new ();
  gtk_menu_item_set_submenu (GTK_MENU_ITEM (menuitem2), menuitem2_menu);

  cut1 = gtk_image_menu_item_new_from_stock ("gtk-cut", accel_group);
  gtk_widget_show (cut1);
  gtk_container_add (GTK_CONTAINER (menuitem2_menu), cut1);

  copy1 = gtk_image_menu_item_new_from_stock ("gtk-copy", accel_group);
  gtk_widget_show (copy1);
  gtk_container_add (GTK_CONTAINER (menuitem2_menu), copy1);

  paste1 = gtk_image_menu_item_new_from_stock ("gtk-paste", accel_group);
  gtk_widget_show (paste1);
  gtk_container_add (GTK_CONTAINER (menuitem2_menu), paste1);

  delete1 = gtk_image_menu_item_new_from_stock ("gtk-delete", accel_group);
  gtk_widget_show (delete1);
  gtk_container_add (GTK_CONTAINER (menuitem2_menu), delete1);

  preferencesMenu = gtk_image_menu_item_new_with_mnemonic (_("Preferences"));
  gtk_widget_show (preferencesMenu);
  gtk_container_add (GTK_CONTAINER (menuitem2_menu), preferencesMenu);
  gtk_tooltips_set_tip (tooltips, preferencesMenu, _("Change settings for viewing tuples and rendering topology"), NULL);

  image23 = gtk_image_new_from_stock ("gtk-preferences", GTK_ICON_SIZE_MENU);
  gtk_widget_show (image23);
  gtk_image_menu_item_set_image (GTK_IMAGE_MENU_ITEM (preferencesMenu), image23);

  menuitem3 = gtk_menu_item_new_with_mnemonic (_("_View"));
  gtk_widget_show (menuitem3);
  gtk_container_add (GTK_CONTAINER (menubar), menuitem3);

  menuEcology = gtk_menu_item_new_with_mnemonic (_("Ecology"));
  gtk_widget_show (menuEcology);
  gtk_container_add (GTK_CONTAINER (menubar), menuEcology);

  menuEcology_menu = gtk_menu_new ();
  gtk_menu_item_set_submenu (GTK_MENU_ITEM (menuEcology), menuEcology_menu);

  menuConnect = gtk_image_menu_item_new_with_mnemonic (_("Connect"));
  gtk_widget_show (menuConnect);
  gtk_container_add (GTK_CONTAINER (menuEcology_menu), menuConnect);
  gtk_tooltips_set_tip (tooltips, menuConnect, _("Specify URL to connect to"), NULL);

  image24 = gtk_image_new_from_stock ("gtk-connect", GTK_ICON_SIZE_MENU);
  gtk_widget_show (image24);
  gtk_image_menu_item_set_image (GTK_IMAGE_MENU_ITEM (menuConnect), image24);

  menuitem4 = gtk_menu_item_new_with_mnemonic (_("_Help"));
  gtk_widget_show (menuitem4);
  gtk_container_add (GTK_CONTAINER (menubar), menuitem4);

  menuitem4_menu = gtk_menu_new ();
  gtk_menu_item_set_submenu (GTK_MENU_ITEM (menuitem4), menuitem4_menu);

  about1 = gtk_menu_item_new_with_mnemonic (_("_About"));
  gtk_widget_show (about1);
  gtk_container_add (GTK_CONTAINER (menuitem4_menu), about1);
  gtk_tooltips_set_tip (tooltips, about1, _("Shows the \"About\" menu of tupleview"), NULL);

  notebook1 = gtk_notebook_new ();
  gtk_widget_show (notebook1);
  gtk_box_pack_start (GTK_BOX (MenuMainStatusArea), notebook1, TRUE, TRUE, 0);

  TupleTreeContentArea = gtk_hpaned_new ();
  gtk_widget_show (TupleTreeContentArea);
  gtk_container_add (GTK_CONTAINER (notebook1), TupleTreeContentArea);
  gtk_paned_set_position (GTK_PANED (TupleTreeContentArea), 300);

  tupleTree = gtk_scrolled_window_new (NULL, NULL);
  gtk_widget_show (tupleTree);
  gtk_paned_pack1 (GTK_PANED (TupleTreeContentArea), tupleTree, FALSE, TRUE);

  peistreeview = gtk_tree_view_new ();
  gtk_widget_show (peistreeview);
  gtk_container_add (GTK_CONTAINER (tupleTree), peistreeview);
  gtk_tree_view_set_reorderable (GTK_TREE_VIEW (peistreeview), TRUE);

  tupleContentArea = gtk_vbox_new (FALSE, 0);
  gtk_widget_show (tupleContentArea);
  gtk_paned_pack2 (GTK_PANED (TupleTreeContentArea), tupleContentArea, TRUE, TRUE);

  tupleInfoFrame = gtk_frame_new (NULL);
  gtk_widget_show (tupleInfoFrame);
  gtk_box_pack_start (GTK_BOX (tupleContentArea), tupleInfoFrame, FALSE, FALSE, 0);
  gtk_container_set_border_width (GTK_CONTAINER (tupleInfoFrame), 1);
  gtk_frame_set_shadow_type (GTK_FRAME (tupleInfoFrame), GTK_SHADOW_IN);

  alignment3 = gtk_alignment_new (0.5, 0.5, 1, 1);
  gtk_widget_show (alignment3);
  gtk_container_add (GTK_CONTAINER (tupleInfoFrame), alignment3);
  gtk_alignment_set_padding (GTK_ALIGNMENT (alignment3), 0, 0, 12, 0);

  table2 = gtk_table_new (5, 3, FALSE);
  gtk_widget_show (table2);
  gtk_container_add (GTK_CONTAINER (alignment3), table2);

  hbox1 = gtk_hbox_new (FALSE, 0);
  gtk_widget_show (hbox1);
  gtk_table_attach (GTK_TABLE (table2), hbox1, 2, 3, 0, 1,
                    (GtkAttachOptions) (GTK_EXPAND | GTK_FILL),
                    (GtkAttachOptions) (GTK_EXPAND | GTK_FILL), 0, 0);

  label3 = gtk_label_new (_("Creator"));
  gtk_widget_show (label3);
  gtk_box_pack_start (GTK_BOX (hbox1), label3, TRUE, TRUE, 0);

  creatorEntry = gtk_entry_new ();
  gtk_widget_show (creatorEntry);
  gtk_box_pack_start (GTK_BOX (hbox1), creatorEntry, TRUE, TRUE, 0);
  gtk_editable_set_editable (GTK_EDITABLE (creatorEntry), FALSE);
  gtk_entry_set_has_frame (GTK_ENTRY (creatorEntry), FALSE);
  gtk_entry_set_invisible_char (GTK_ENTRY (creatorEntry), 9679);

  tsExpireEntry2 = gtk_entry_new ();
  gtk_widget_show (tsExpireEntry2);
  gtk_table_attach (GTK_TABLE (table2), tsExpireEntry2, 2, 3, 4, 5,
                    (GtkAttachOptions) (GTK_EXPAND | GTK_FILL),
                    (GtkAttachOptions) (0), 2, 2);
  gtk_tooltips_set_tip (tooltips, tsExpireEntry2, _("Shows the user-selectable timepoint associated with this tuple. Can be edited for newly inserted tuples."), NULL);
  gtk_editable_set_editable (GTK_EDITABLE (tsExpireEntry2), FALSE);
  gtk_entry_set_has_frame (GTK_ENTRY (tsExpireEntry2), FALSE);
  gtk_entry_set_width_chars (GTK_ENTRY (tsExpireEntry2), 18);

  tsExpireEntry = gtk_entry_new ();
  gtk_widget_show (tsExpireEntry);
  gtk_table_attach (GTK_TABLE (table2), tsExpireEntry, 1, 2, 4, 5,
                    (GtkAttachOptions) (GTK_EXPAND | GTK_FILL),
                    (GtkAttachOptions) (0), 0, 0);
  gtk_tooltips_set_tip (tooltips, tsExpireEntry, _("Shows the user-selectable timepoint associated with this tuple. Can be edited for newly inserted tuples."), NULL);
  gtk_editable_set_editable (GTK_EDITABLE (tsExpireEntry), FALSE);
  gtk_entry_set_has_frame (GTK_ENTRY (tsExpireEntry), FALSE);
  gtk_entry_set_width_chars (GTK_ENTRY (tsExpireEntry), 18);

  tsExpireLabel = gtk_label_new (_("ts_expire"));
  gtk_widget_show (tsExpireLabel);
  gtk_table_attach (GTK_TABLE (table2), tsExpireLabel, 0, 1, 4, 5,
                    (GtkAttachOptions) (0),
                    (GtkAttachOptions) (0), 0, 0);
  gtk_misc_set_alignment (GTK_MISC (tsExpireLabel), 0, 0.5);

  tsUserLabel1 = gtk_label_new (_("ts_user"));
  gtk_widget_show (tsUserLabel1);
  gtk_table_attach (GTK_TABLE (table2), tsUserLabel1, 0, 1, 3, 4,
                    (GtkAttachOptions) (0),
                    (GtkAttachOptions) (0), 0, 0);
  gtk_misc_set_alignment (GTK_MISC (tsUserLabel1), 0, 0.5);

  tsWriteLabel1 = gtk_label_new (_("ts_write"));
  gtk_widget_show (tsWriteLabel1);
  gtk_table_attach (GTK_TABLE (table2), tsWriteLabel1, 0, 1, 2, 3,
                    (GtkAttachOptions) (0),
                    (GtkAttachOptions) (0), 0, 0);
  gtk_misc_set_alignment (GTK_MISC (tsWriteLabel1), 0, 0.5);

  tupleKeyLabel = gtk_label_new (_("Tuple Key"));
  gtk_widget_show (tupleKeyLabel);
  gtk_table_attach (GTK_TABLE (table2), tupleKeyLabel, 0, 1, 1, 2,
                    (GtkAttachOptions) (0),
                    (GtkAttachOptions) (0), 0, 0);
  gtk_misc_set_alignment (GTK_MISC (tupleKeyLabel), 0, 0.5);

  componentIDlabel1 = gtk_label_new (_("Owner"));
  gtk_widget_show (componentIDlabel1);
  gtk_table_attach (GTK_TABLE (table2), componentIDlabel1, 0, 1, 0, 1,
                    (GtkAttachOptions) (0),
                    (GtkAttachOptions) (0), 5, 0);
  gtk_misc_set_alignment (GTK_MISC (componentIDlabel1), 0, 0.5);

  tsUserEntry = gtk_entry_new ();
  gtk_widget_show (tsUserEntry);
  gtk_table_attach (GTK_TABLE (table2), tsUserEntry, 1, 2, 3, 4,
                    (GtkAttachOptions) (GTK_EXPAND | GTK_FILL),
                    (GtkAttachOptions) (0), 0, 0);
  gtk_tooltips_set_tip (tooltips, tsUserEntry, _("Shows the user-selectable timepoint associated with this tuple. Can be edited for newly inserted tuples."), NULL);
  gtk_editable_set_editable (GTK_EDITABLE (tsUserEntry), FALSE);
  gtk_entry_set_has_frame (GTK_ENTRY (tsUserEntry), FALSE);
  gtk_entry_set_width_chars (GTK_ENTRY (tsUserEntry), 18);

  tsUserEntry2 = gtk_entry_new ();
  gtk_widget_show (tsUserEntry2);
  gtk_table_attach (GTK_TABLE (table2), tsUserEntry2, 2, 3, 3, 4,
                    (GtkAttachOptions) (GTK_EXPAND | GTK_FILL),
                    (GtkAttachOptions) (0), 2, 2);
  gtk_editable_set_editable (GTK_EDITABLE (tsUserEntry2), FALSE);
  gtk_entry_set_has_frame (GTK_ENTRY (tsUserEntry2), FALSE);
  gtk_entry_set_width_chars (GTK_ENTRY (tsUserEntry2), 22);

  tsWriteEntry2 = gtk_entry_new ();
  gtk_widget_show (tsWriteEntry2);
  gtk_table_attach (GTK_TABLE (table2), tsWriteEntry2, 2, 3, 2, 3,
                    (GtkAttachOptions) (GTK_EXPAND | GTK_FILL),
                    (GtkAttachOptions) (0), 2, 2);
  gtk_editable_set_editable (GTK_EDITABLE (tsWriteEntry2), FALSE);
  gtk_entry_set_has_frame (GTK_ENTRY (tsWriteEntry2), FALSE);
  gtk_entry_set_width_chars (GTK_ENTRY (tsWriteEntry2), 22);

  tsWriteEntry = gtk_entry_new ();
  gtk_widget_show (tsWriteEntry);
  gtk_table_attach (GTK_TABLE (table2), tsWriteEntry, 1, 2, 2, 3,
                    (GtkAttachOptions) (GTK_EXPAND | GTK_FILL),
                    (GtkAttachOptions) (0), 2, 2);
  gtk_tooltips_set_tip (tooltips, tsWriteEntry, _("Shows the timepoint when this tuple was last modified."), NULL);
  gtk_editable_set_editable (GTK_EDITABLE (tsWriteEntry), FALSE);
  gtk_entry_set_has_frame (GTK_ENTRY (tsWriteEntry), FALSE);
  gtk_entry_set_width_chars (GTK_ENTRY (tsWriteEntry), 18);

  tupleKeyEntry = gtk_entry_new ();
  gtk_widget_show (tupleKeyEntry);
  gtk_table_attach (GTK_TABLE (table2), tupleKeyEntry, 1, 3, 1, 2,
                    (GtkAttachOptions) (GTK_EXPAND | GTK_FILL),
                    (GtkAttachOptions) (0), 0, 0);
  gtk_tooltips_set_tip (tooltips, tupleKeyEntry, _("Shows the key of the currently selected tuple. If you want to create a new tuple, write it's name here."), NULL);
  gtk_entry_set_max_length (GTK_ENTRY (tupleKeyEntry), 256);
  gtk_entry_set_width_chars (GTK_ENTRY (tupleKeyEntry), 40);

  ownerEntry = gtk_entry_new ();
  gtk_widget_show (ownerEntry);
  gtk_table_attach (GTK_TABLE (table2), ownerEntry, 1, 2, 0, 1,
                    (GtkAttachOptions) (GTK_EXPAND | GTK_FILL),
                    (GtkAttachOptions) (0), 0, 0);
  gtk_entry_set_has_frame (GTK_ENTRY (ownerEntry), FALSE);
  gtk_entry_set_invisible_char (GTK_ENTRY (ownerEntry), 9679);

  tupleInfoLabel = gtk_label_new (_("<b>Tuple Info</b>"));
  gtk_widget_show (tupleInfoLabel);
  gtk_frame_set_label_widget (GTK_FRAME (tupleInfoFrame), tupleInfoLabel);
  gtk_label_set_use_markup (GTK_LABEL (tupleInfoLabel), TRUE);

  tupleViewNoteBook = gtk_notebook_new ();
  gtk_widget_show (tupleViewNoteBook);
  gtk_box_pack_start (GTK_BOX (tupleContentArea), tupleViewNoteBook, TRUE, TRUE, 0);

  tupleTextPane = gtk_vpaned_new ();
  gtk_widget_show (tupleTextPane);
  gtk_container_add (GTK_CONTAINER (tupleViewNoteBook), tupleTextPane);

  currentValueFrame = gtk_frame_new (NULL);
  gtk_widget_show (currentValueFrame);
  gtk_paned_pack1 (GTK_PANED (tupleTextPane), currentValueFrame, FALSE, TRUE);
  gtk_frame_set_shadow_type (GTK_FRAME (currentValueFrame), GTK_SHADOW_NONE);

  alignment1 = gtk_alignment_new (0.5, 0.5, 1, 1);
  gtk_widget_show (alignment1);
  gtk_container_add (GTK_CONTAINER (currentValueFrame), alignment1);

  scrolledwindow1 = gtk_scrolled_window_new (NULL, NULL);
  gtk_widget_show (scrolledwindow1);
  gtk_container_add (GTK_CONTAINER (alignment1), scrolledwindow1);
  gtk_scrolled_window_set_shadow_type (GTK_SCROLLED_WINDOW (scrolledwindow1), GTK_SHADOW_IN);

  currentValueTextView = gtk_text_view_new ();
  gtk_widget_show (currentValueTextView);
  gtk_container_add (GTK_CONTAINER (scrolledwindow1), currentValueTextView);
  gtk_tooltips_set_tip (tooltips, currentValueTextView, _("Shows the current value of the selected tuple. Updates continously when the tuple is updated."), NULL);
  gtk_text_view_set_editable (GTK_TEXT_VIEW (currentValueTextView), FALSE);

  currentValueLabel = gtk_label_new (_("<b>Current value</b>"));
  gtk_widget_show (currentValueLabel);
  gtk_frame_set_label_widget (GTK_FRAME (currentValueFrame), currentValueLabel);
  gtk_label_set_use_markup (GTK_LABEL (currentValueLabel), TRUE);

  vbox2 = gtk_vbox_new (FALSE, 0);
  gtk_widget_show (vbox2);
  gtk_paned_pack2 (GTK_PANED (tupleTextPane), vbox2, TRUE, TRUE);

  hbox2 = gtk_hbox_new (TRUE, 0);
  gtk_widget_show (hbox2);
  gtk_box_pack_start (GTK_BOX (vbox2), hbox2, FALSE, FALSE, 0);

  submitButton = gtk_button_new ();
  gtk_widget_show (submitButton);
  gtk_box_pack_start (GTK_BOX (hbox2), submitButton, FALSE, FALSE, 0);
  gtk_tooltips_set_tip (tooltips, submitButton, _("Submits the value in the edit box below as the new value for this tuple"), NULL);

  alignment5 = gtk_alignment_new (0.5, 0.5, 0, 0);
  gtk_widget_show (alignment5);
  gtk_container_add (GTK_CONTAINER (submitButton), alignment5);

  hbox4 = gtk_hbox_new (FALSE, 2);
  gtk_widget_show (hbox4);
  gtk_container_add (GTK_CONTAINER (alignment5), hbox4);

  image7 = gtk_image_new_from_stock ("gtk-go-up", GTK_ICON_SIZE_BUTTON);
  gtk_widget_show (image7);
  gtk_box_pack_start (GTK_BOX (hbox4), image7, FALSE, FALSE, 0);

  label2 = gtk_label_new_with_mnemonic (_("submit"));
  gtk_widget_show (label2);
  gtk_box_pack_start (GTK_BOX (hbox4), label2, FALSE, FALSE, 0);

  grabButton = gtk_button_new ();
  gtk_widget_show (grabButton);
  gtk_box_pack_start (GTK_BOX (hbox2), grabButton, FALSE, FALSE, 0);
  gtk_tooltips_set_tip (tooltips, grabButton, _("Copies the current value of the tuple to the edit box"), NULL);

  alignment4 = gtk_alignment_new (0.5, 0.5, 0, 0);
  gtk_widget_show (alignment4);
  gtk_container_add (GTK_CONTAINER (grabButton), alignment4);

  hbox3 = gtk_hbox_new (FALSE, 2);
  gtk_widget_show (hbox3);
  gtk_container_add (GTK_CONTAINER (alignment4), hbox3);

  image6 = gtk_image_new_from_stock ("gtk-go-down", GTK_ICON_SIZE_BUTTON);
  gtk_widget_show (image6);
  gtk_box_pack_start (GTK_BOX (hbox3), image6, FALSE, FALSE, 0);

  label1 = gtk_label_new_with_mnemonic (_("grab"));
  gtk_widget_show (label1);
  gtk_box_pack_start (GTK_BOX (hbox3), label1, FALSE, FALSE, 0);

  editValueFrame = gtk_frame_new (NULL);
  gtk_widget_show (editValueFrame);
  gtk_box_pack_start (GTK_BOX (vbox2), editValueFrame, TRUE, TRUE, 0);
  gtk_frame_set_shadow_type (GTK_FRAME (editValueFrame), GTK_SHADOW_NONE);

  alignment2 = gtk_alignment_new (0.5, 0.5, 1, 1);
  gtk_widget_show (alignment2);
  gtk_container_add (GTK_CONTAINER (editValueFrame), alignment2);

  vbox9 = gtk_vbox_new (FALSE, 0);
  gtk_widget_show (vbox9);
  gtk_container_add (GTK_CONTAINER (alignment2), vbox9);

  table3 = gtk_table_new (2, 3, FALSE);
  gtk_widget_show (table3);
  gtk_box_pack_start (GTK_BOX (vbox9), table3, FALSE, TRUE, 0);

  tsExpireEntry22 = gtk_entry_new ();
  gtk_widget_show (tsExpireEntry22);
  gtk_table_attach (GTK_TABLE (table3), tsExpireEntry22, 2, 3, 1, 2,
                    (GtkAttachOptions) (GTK_EXPAND | GTK_FILL),
                    (GtkAttachOptions) (0), 0, 1);
  gtk_tooltips_set_tip (tooltips, tsExpireEntry22, _("Shows the user-selectable timepoint associated with this tuple. Can be edited for newly inserted tuples."), NULL);
  gtk_editable_set_editable (GTK_EDITABLE (tsExpireEntry22), FALSE);
  gtk_entry_set_has_frame (GTK_ENTRY (tsExpireEntry22), FALSE);
  gtk_entry_set_width_chars (GTK_ENTRY (tsExpireEntry22), 18);

  tsExpireEntry21 = gtk_entry_new ();
  gtk_widget_show (tsExpireEntry21);
  gtk_table_attach (GTK_TABLE (table3), tsExpireEntry21, 1, 2, 1, 2,
                    (GtkAttachOptions) (GTK_EXPAND | GTK_FILL),
                    (GtkAttachOptions) (0), 0, 1);
  gtk_tooltips_set_tip (tooltips, tsExpireEntry21, _("Shows the user-selectable timepoint associated with this tuple. Can be edited for newly inserted tuples."), NULL);
  gtk_entry_set_width_chars (GTK_ENTRY (tsExpireEntry21), 18);

  tsUserEntry22 = gtk_entry_new ();
  gtk_widget_show (tsUserEntry22);
  gtk_table_attach (GTK_TABLE (table3), tsUserEntry22, 2, 3, 0, 1,
                    (GtkAttachOptions) (0),
                    (GtkAttachOptions) (0), 2, 2);
  gtk_editable_set_editable (GTK_EDITABLE (tsUserEntry22), FALSE);
  gtk_entry_set_has_frame (GTK_ENTRY (tsUserEntry22), FALSE);
  gtk_entry_set_width_chars (GTK_ENTRY (tsUserEntry22), 22);

  tsUserEntry21 = gtk_entry_new ();
  gtk_widget_show (tsUserEntry21);
  gtk_table_attach (GTK_TABLE (table3), tsUserEntry21, 1, 2, 0, 1,
                    (GtkAttachOptions) (0),
                    (GtkAttachOptions) (0), 0, 0);
  gtk_tooltips_set_tip (tooltips, tsUserEntry21, _("Shows the user-selectable timepoint associated with this tuple. Can be edited for newly inserted tuples."), NULL);
  gtk_entry_set_width_chars (GTK_ENTRY (tsUserEntry21), 18);

  ts_expireLabel2 = gtk_label_new (_("ts_expire"));
  gtk_widget_show (ts_expireLabel2);
  gtk_table_attach (GTK_TABLE (table3), ts_expireLabel2, 0, 1, 1, 2,
                    (GtkAttachOptions) (0),
                    (GtkAttachOptions) (0), 0, 0);
  gtk_misc_set_alignment (GTK_MISC (ts_expireLabel2), 0, 0.5);

  ts_userLabel2 = gtk_label_new (_("ts_user"));
  gtk_widget_show (ts_userLabel2);
  gtk_table_attach (GTK_TABLE (table3), ts_userLabel2, 0, 1, 0, 1,
                    (GtkAttachOptions) (0),
                    (GtkAttachOptions) (0), 0, 0);
  gtk_misc_set_alignment (GTK_MISC (ts_userLabel2), 0, 0.5);

  scrolledwindow2 = gtk_scrolled_window_new (NULL, NULL);
  gtk_widget_show (scrolledwindow2);
  gtk_box_pack_start (GTK_BOX (vbox9), scrolledwindow2, TRUE, TRUE, 0);
  gtk_scrolled_window_set_shadow_type (GTK_SCROLLED_WINDOW (scrolledwindow2), GTK_SHADOW_IN);

  editValueTextView = gtk_text_view_new ();
  gtk_widget_show (editValueTextView);
  gtk_container_add (GTK_CONTAINER (scrolledwindow2), editValueTextView);
  gtk_tooltips_set_tip (tooltips, editValueTextView, _("Allows you to manipulate the current value (as text) of the selected tuple. Is not update when the tuple is updated."), NULL);
  gtk_text_view_set_wrap_mode (GTK_TEXT_VIEW (editValueTextView), GTK_WRAP_WORD);

  editValueLabel = gtk_label_new (_("<b>Edit value</b>"));
  gtk_widget_show (editValueLabel);
  gtk_frame_set_label_widget (GTK_FRAME (editValueFrame), editValueLabel);
  gtk_label_set_use_markup (GTK_LABEL (editValueLabel), TRUE);

  noteTabAsText = gtk_label_new (_("Text value"));
  gtk_widget_show (noteTabAsText);
  gtk_notebook_set_tab_label (GTK_NOTEBOOK (tupleViewNoteBook), gtk_notebook_get_nth_page (GTK_NOTEBOOK (tupleViewNoteBook), 0), noteTabAsText);

  hbox13 = gtk_hbox_new (FALSE, 0);
  gtk_widget_show (hbox13);
  gtk_container_add (GTK_CONTAINER (tupleViewNoteBook), hbox13);

  tupleImageScrollWindow = gtk_scrolled_window_new (NULL, NULL);
  gtk_widget_show (tupleImageScrollWindow);
  gtk_box_pack_start (GTK_BOX (hbox13), tupleImageScrollWindow, TRUE, TRUE, 0);
  gtk_scrolled_window_set_policy (GTK_SCROLLED_WINDOW (tupleImageScrollWindow), GTK_POLICY_AUTOMATIC, GTK_POLICY_AUTOMATIC);
  gtk_scrolled_window_set_shadow_type (GTK_SCROLLED_WINDOW (tupleImageScrollWindow), GTK_SHADOW_ETCHED_IN);

  tupleImageViewport = gtk_viewport_new (NULL, NULL);
  gtk_widget_show (tupleImageViewport);
  gtk_container_add (GTK_CONTAINER (tupleImageScrollWindow), tupleImageViewport);
  GTK_WIDGET_SET_FLAGS (tupleImageViewport, GTK_CAN_FOCUS);

  tupleDrawingArea = gtk_drawing_area_new ();
  gtk_widget_show (tupleDrawingArea);
  gtk_container_add (GTK_CONTAINER (tupleImageViewport), tupleDrawingArea);
  gtk_widget_set_size_request (tupleDrawingArea, 400, 400);

  ImageInfoVBox = gtk_vbox_new (FALSE, 0);
  gtk_widget_show (ImageInfoVBox);
  gtk_box_pack_start (GTK_BOX (hbox13), ImageInfoVBox, FALSE, TRUE, 0);

  imageInfoInterfaceFrame = gtk_frame_new (NULL);
  gtk_widget_show (imageInfoInterfaceFrame);
  gtk_box_pack_start (GTK_BOX (ImageInfoVBox), imageInfoInterfaceFrame, TRUE, TRUE, 0);
  gtk_frame_set_shadow_type (GTK_FRAME (imageInfoInterfaceFrame), GTK_SHADOW_NONE);

  alignment9 = gtk_alignment_new (0.5, 0.5, 1, 1);
  gtk_widget_show (alignment9);
  gtk_container_add (GTK_CONTAINER (imageInfoInterfaceFrame), alignment9);
  gtk_alignment_set_padding (GTK_ALIGNMENT (alignment9), 0, 0, 12, 0);

  imageInfoInterfaceVBox = gtk_vbox_new (FALSE, 0);
  gtk_widget_show (imageInfoInterfaceVBox);
  gtk_container_add (GTK_CONTAINER (alignment9), imageInfoInterfaceVBox);

  imageInfoClickableButton = gtk_check_button_new_with_mnemonic (_("Mouse buttons"));
  gtk_widget_show (imageInfoClickableButton);
  gtk_box_pack_start (GTK_BOX (imageInfoInterfaceVBox), imageInfoClickableButton, FALSE, FALSE, 0);

  imageInfoKeyboardButton = gtk_check_button_new_with_mnemonic (_("Keyboard"));
  gtk_widget_show (imageInfoKeyboardButton);
  gtk_box_pack_start (GTK_BOX (imageInfoInterfaceVBox), imageInfoKeyboardButton, FALSE, FALSE, 0);

  imageInfoInterfaceLabel = gtk_label_new (_("<b>Interface</b>"));
  gtk_widget_show (imageInfoInterfaceLabel);
  gtk_frame_set_label_widget (GTK_FRAME (imageInfoInterfaceFrame), imageInfoInterfaceLabel);
  gtk_label_set_use_markup (GTK_LABEL (imageInfoInterfaceLabel), TRUE);

  ImageInfoPropFrame = gtk_frame_new (NULL);
  gtk_widget_show (ImageInfoPropFrame);
  gtk_box_pack_start (GTK_BOX (ImageInfoVBox), ImageInfoPropFrame, FALSE, TRUE, 0);
  gtk_frame_set_shadow_type (GTK_FRAME (ImageInfoPropFrame), GTK_SHADOW_NONE);

  alignment8 = gtk_alignment_new (0.5, 0.5, 1, 1);
  gtk_widget_show (alignment8);
  gtk_container_add (GTK_CONTAINER (ImageInfoPropFrame), alignment8);
  gtk_alignment_set_padding (GTK_ALIGNMENT (alignment8), 0, 0, 12, 0);

  ImageInfoPropVBox = gtk_vbox_new (FALSE, 0);
  gtk_widget_show (ImageInfoPropVBox);
  gtk_container_add (GTK_CONTAINER (alignment8), ImageInfoPropVBox);

  imageInfoTypeHBox = gtk_hbox_new (FALSE, 0);
  gtk_widget_show (imageInfoTypeHBox);
  gtk_box_pack_start (GTK_BOX (ImageInfoPropVBox), imageInfoTypeHBox, FALSE, FALSE, 0);

  imageInfoTypeLabel = gtk_label_new (_("type"));
  gtk_widget_show (imageInfoTypeLabel);
  gtk_box_pack_start (GTK_BOX (imageInfoTypeHBox), imageInfoTypeLabel, FALSE, FALSE, 0);

  imageInfoTypeText = gtk_entry_new ();
  gtk_widget_show (imageInfoTypeText);
  gtk_box_pack_start (GTK_BOX (imageInfoTypeHBox), imageInfoTypeText, FALSE, FALSE, 0);
  gtk_editable_set_editable (GTK_EDITABLE (imageInfoTypeText), FALSE);
  gtk_entry_set_text (GTK_ENTRY (imageInfoTypeText), _("none"));
  gtk_entry_set_invisible_char (GTK_ENTRY (imageInfoTypeText), 9679);

  imageInfoSizeHBox = gtk_hbox_new (FALSE, 0);
  gtk_widget_show (imageInfoSizeHBox);
  gtk_box_pack_start (GTK_BOX (ImageInfoPropVBox), imageInfoSizeHBox, FALSE, FALSE, 0);

  imageInfoSizeLabel = gtk_label_new (_("size"));
  gtk_widget_show (imageInfoSizeLabel);
  gtk_box_pack_start (GTK_BOX (imageInfoSizeHBox), imageInfoSizeLabel, FALSE, FALSE, 0);

  imageInfoSizeText = gtk_entry_new ();
  gtk_widget_show (imageInfoSizeText);
  gtk_box_pack_start (GTK_BOX (imageInfoSizeHBox), imageInfoSizeText, FALSE, FALSE, 0);
  gtk_editable_set_editable (GTK_EDITABLE (imageInfoSizeText), FALSE);
  gtk_entry_set_text (GTK_ENTRY (imageInfoSizeText), _("(0 0)"));
  gtk_entry_set_invisible_char (GTK_ENTRY (imageInfoSizeText), 9679);

  imageInfoPropLabel = gtk_label_new (_("<b>Image Properties</b>"));
  gtk_widget_show (imageInfoPropLabel);
  gtk_frame_set_label_widget (GTK_FRAME (ImageInfoPropFrame), imageInfoPropLabel);
  gtk_label_set_use_markup (GTK_LABEL (imageInfoPropLabel), TRUE);

  imageInfoPosFrame = gtk_frame_new (NULL);
  gtk_widget_show (imageInfoPosFrame);
  gtk_box_pack_start (GTK_BOX (ImageInfoVBox), imageInfoPosFrame, FALSE, FALSE, 0);
  gtk_frame_set_shadow_type (GTK_FRAME (imageInfoPosFrame), GTK_SHADOW_NONE);

  alignment6 = gtk_alignment_new (0.5, 0.5, 1, 1);
  gtk_widget_show (alignment6);
  gtk_container_add (GTK_CONTAINER (imageInfoPosFrame), alignment6);
  gtk_alignment_set_padding (GTK_ALIGNMENT (alignment6), 0, 0, 12, 0);

  vbox7 = gtk_vbox_new (FALSE, 0);
  gtk_widget_show (vbox7);
  gtk_container_add (GTK_CONTAINER (alignment6), vbox7);

  imageInfoXYHBox = gtk_hbox_new (FALSE, 0);
  gtk_widget_show (imageInfoXYHBox);
  gtk_box_pack_start (GTK_BOX (vbox7), imageInfoXYHBox, FALSE, FALSE, 0);

  imageInfoXYLabel = gtk_label_new (_("xy"));
  gtk_widget_show (imageInfoXYLabel);
  gtk_box_pack_start (GTK_BOX (imageInfoXYHBox), imageInfoXYLabel, FALSE, FALSE, 0);

  imageInfoXYText = gtk_entry_new ();
  gtk_widget_show (imageInfoXYText);
  gtk_box_pack_start (GTK_BOX (imageInfoXYHBox), imageInfoXYText, FALSE, FALSE, 0);
  gtk_entry_set_text (GTK_ENTRY (imageInfoXYText), _("(0 0)"));
  gtk_entry_set_invisible_char (GTK_ENTRY (imageInfoXYText), 9679);

  imageInfoUVHBox = gtk_hbox_new (FALSE, 0);
  gtk_widget_show (imageInfoUVHBox);
  gtk_box_pack_start (GTK_BOX (vbox7), imageInfoUVHBox, FALSE, FALSE, 0);

  imageInfoUVLabel = gtk_label_new (_("uv"));
  gtk_widget_show (imageInfoUVLabel);
  gtk_box_pack_start (GTK_BOX (imageInfoUVHBox), imageInfoUVLabel, FALSE, FALSE, 0);

  imageInfoUVText = gtk_entry_new ();
  gtk_widget_show (imageInfoUVText);
  gtk_box_pack_start (GTK_BOX (imageInfoUVHBox), imageInfoUVText, FALSE, FALSE, 0);
  gtk_entry_set_text (GTK_ENTRY (imageInfoUVText), _("(0 0)"));
  gtk_entry_set_invisible_char (GTK_ENTRY (imageInfoUVText), 9679);

  label8 = gtk_label_new (_("<b>Position</b>"));
  gtk_widget_show (label8);
  gtk_frame_set_label_widget (GTK_FRAME (imageInfoPosFrame), label8);
  gtk_label_set_use_markup (GTK_LABEL (label8), TRUE);

  imageInfoValFrame = gtk_frame_new (NULL);
  gtk_widget_show (imageInfoValFrame);
  gtk_box_pack_start (GTK_BOX (ImageInfoVBox), imageInfoValFrame, FALSE, FALSE, 0);
  gtk_frame_set_shadow_type (GTK_FRAME (imageInfoValFrame), GTK_SHADOW_NONE);

  alignment7 = gtk_alignment_new (0.5, 0.5, 1, 1);
  gtk_widget_show (alignment7);
  gtk_container_add (GTK_CONTAINER (imageInfoValFrame), alignment7);
  gtk_alignment_set_padding (GTK_ALIGNMENT (alignment7), 0, 0, 12, 0);

  vbox8 = gtk_vbox_new (FALSE, 0);
  gtk_widget_show (vbox8);
  gtk_container_add (GTK_CONTAINER (alignment7), vbox8);

  imageInfoRGBHBox = gtk_hbox_new (FALSE, 0);
  gtk_widget_show (imageInfoRGBHBox);
  gtk_box_pack_start (GTK_BOX (vbox8), imageInfoRGBHBox, FALSE, FALSE, 0);

  imageInfoRGBlabel = gtk_label_new (_("rgb"));
  gtk_widget_show (imageInfoRGBlabel);
  gtk_box_pack_start (GTK_BOX (imageInfoRGBHBox), imageInfoRGBlabel, FALSE, FALSE, 0);

  imageInfoRGBText = gtk_entry_new ();
  gtk_widget_show (imageInfoRGBText);
  gtk_box_pack_start (GTK_BOX (imageInfoRGBHBox), imageInfoRGBText, FALSE, FALSE, 0);
  gtk_editable_set_editable (GTK_EDITABLE (imageInfoRGBText), FALSE);
  gtk_entry_set_text (GTK_ENTRY (imageInfoRGBText), _("(0 0 0)"));
  gtk_entry_set_invisible_char (GTK_ENTRY (imageInfoRGBText), 9679);

  imageInfoHSVHBox = gtk_hbox_new (FALSE, 0);
  gtk_widget_show (imageInfoHSVHBox);
  gtk_box_pack_start (GTK_BOX (vbox8), imageInfoHSVHBox, FALSE, TRUE, 0);

  imageInfoHSVLabel = gtk_label_new (_("hsv"));
  gtk_widget_show (imageInfoHSVLabel);
  gtk_box_pack_start (GTK_BOX (imageInfoHSVHBox), imageInfoHSVLabel, FALSE, FALSE, 0);

  imageInfoHSVText = gtk_entry_new ();
  gtk_widget_show (imageInfoHSVText);
  gtk_box_pack_start (GTK_BOX (imageInfoHSVHBox), imageInfoHSVText, FALSE, FALSE, 0);
  gtk_editable_set_editable (GTK_EDITABLE (imageInfoHSVText), FALSE);
  gtk_entry_set_text (GTK_ENTRY (imageInfoHSVText), _("(0 0 0)"));
  gtk_entry_set_invisible_char (GTK_ENTRY (imageInfoHSVText), 9679);

  label9 = gtk_label_new (_("<b>Value</b>"));
  gtk_widget_show (label9);
  gtk_frame_set_label_widget (GTK_FRAME (imageInfoValFrame), label9);
  gtk_label_set_use_markup (GTK_LABEL (label9), TRUE);

  imageInfoSpaceLabel = gtk_label_new ("");
  gtk_widget_show (imageInfoSpaceLabel);
  gtk_box_pack_start (GTK_BOX (ImageInfoVBox), imageInfoSpaceLabel, FALSE, FALSE, 0);

  noteTabAsImage = gtk_label_new (_("Image"));
  gtk_widget_show (noteTabAsImage);
  gtk_notebook_set_tab_label (GTK_NOTEBOOK (tupleViewNoteBook), gtk_notebook_get_nth_page (GTK_NOTEBOOK (tupleViewNoteBook), 1), noteTabAsImage);

  hbox17 = gtk_hbox_new (FALSE, 0);
  gtk_widget_show (hbox17);
  gtk_container_add (GTK_CONTAINER (tupleViewNoteBook), hbox17);

  scrolledwindow3 = gtk_scrolled_window_new (NULL, NULL);
  gtk_widget_show (scrolledwindow3);
  gtk_box_pack_start (GTK_BOX (hbox17), scrolledwindow3, TRUE, TRUE, 0);
  gtk_scrolled_window_set_policy (GTK_SCROLLED_WINDOW (scrolledwindow3), GTK_POLICY_AUTOMATIC, GTK_POLICY_AUTOMATIC);
  gtk_scrolled_window_set_shadow_type (GTK_SCROLLED_WINDOW (scrolledwindow3), GTK_SHADOW_ETCHED_IN);

  viewport1 = gtk_viewport_new (NULL, NULL);
  gtk_widget_show (viewport1);
  gtk_container_add (GTK_CONTAINER (scrolledwindow3), viewport1);
  GTK_WIDGET_SET_FLAGS (viewport1, GTK_CAN_FOCUS);

  dotGraphDrawingArea = gtk_drawing_area_new ();
  gtk_widget_show (dotGraphDrawingArea);
  gtk_container_add (GTK_CONTAINER (viewport1), dotGraphDrawingArea);
  gtk_widget_set_size_request (dotGraphDrawingArea, 400, 400);

  vbox13 = gtk_vbox_new (FALSE, 0);
  gtk_widget_show (vbox13);
  gtk_box_pack_start (GTK_BOX (hbox17), vbox13, FALSE, FALSE, 0);

  frame3 = gtk_frame_new (NULL);
  gtk_widget_show (frame3);
  gtk_box_pack_start (GTK_BOX (vbox13), frame3, TRUE, TRUE, 0);
  gtk_frame_set_shadow_type (GTK_FRAME (frame3), GTK_SHADOW_NONE);

  alignment12 = gtk_alignment_new (0.5, 0.5, 1, 1);
  gtk_widget_show (alignment12);
  gtk_container_add (GTK_CONTAINER (frame3), alignment12);
  gtk_alignment_set_padding (GTK_ALIGNMENT (alignment12), 0, 0, 12, 0);

  vbox14 = gtk_vbox_new (FALSE, 0);
  gtk_widget_show (vbox14);
  gtk_container_add (GTK_CONTAINER (alignment12), vbox14);

  dotGraphDot_rb = gtk_radio_button_new_with_mnemonic (NULL, _("DOT"));
  gtk_widget_show (dotGraphDot_rb);
  gtk_box_pack_start (GTK_BOX (vbox14), dotGraphDot_rb, FALSE, FALSE, 0);
  gtk_radio_button_set_group (GTK_RADIO_BUTTON (dotGraphDot_rb), dotGraphDot_rb_group);
  dotGraphDot_rb_group = gtk_radio_button_get_group (GTK_RADIO_BUTTON (dotGraphDot_rb));
  gtk_toggle_button_set_active (GTK_TOGGLE_BUTTON (dotGraphDot_rb), TRUE);

  dotGraphFdp_rb = gtk_radio_button_new_with_mnemonic (NULL, _("FDP"));
  gtk_widget_show (dotGraphFdp_rb);
  gtk_box_pack_start (GTK_BOX (vbox14), dotGraphFdp_rb, FALSE, FALSE, 0);
  gtk_radio_button_set_group (GTK_RADIO_BUTTON (dotGraphFdp_rb), dotGraphDot_rb_group);
  dotGraphDot_rb_group = gtk_radio_button_get_group (GTK_RADIO_BUTTON (dotGraphFdp_rb));

  dotGraphCirco_rb = gtk_radio_button_new_with_mnemonic (NULL, _("Circo"));
  gtk_widget_show (dotGraphCirco_rb);
  gtk_box_pack_start (GTK_BOX (vbox14), dotGraphCirco_rb, FALSE, FALSE, 0);
  gtk_radio_button_set_group (GTK_RADIO_BUTTON (dotGraphCirco_rb), dotGraphDot_rb_group);
  dotGraphDot_rb_group = gtk_radio_button_get_group (GTK_RADIO_BUTTON (dotGraphCirco_rb));

  label14 = gtk_label_new (_("<b>Graphtype</b>"));
  gtk_widget_show (label14);
  gtk_frame_set_label_widget (GTK_FRAME (frame3), label14);
  gtk_label_set_use_markup (GTK_LABEL (label14), TRUE);

  frame4 = gtk_frame_new (NULL);
  gtk_widget_show (frame4);
  gtk_box_pack_start (GTK_BOX (vbox13), frame4, TRUE, TRUE, 0);
  gtk_frame_set_shadow_type (GTK_FRAME (frame4), GTK_SHADOW_NONE);

  alignment13 = gtk_alignment_new (0.5, 0.5, 1, 1);
  gtk_widget_show (alignment13);
  gtk_container_add (GTK_CONTAINER (frame4), alignment13);
  gtk_alignment_set_padding (GTK_ALIGNMENT (alignment13), 0, 0, 12, 0);

  vbox15 = gtk_vbox_new (FALSE, 0);
  gtk_widget_show (vbox15);
  gtk_container_add (GTK_CONTAINER (alignment13), vbox15);

  dotGraphPng_rb = gtk_radio_button_new_with_mnemonic (NULL, _("PNG"));
  gtk_widget_show (dotGraphPng_rb);
  gtk_box_pack_start (GTK_BOX (vbox15), dotGraphPng_rb, FALSE, FALSE, 0);
  gtk_radio_button_set_group (GTK_RADIO_BUTTON (dotGraphPng_rb), dotGraphPng_rb_group);
  dotGraphPng_rb_group = gtk_radio_button_get_group (GTK_RADIO_BUTTON (dotGraphPng_rb));
  gtk_toggle_button_set_active (GTK_TOGGLE_BUTTON (dotGraphPng_rb), TRUE);

  dotGraphSvg_rb = gtk_radio_button_new_with_mnemonic (NULL, _("SVG"));
  gtk_widget_show (dotGraphSvg_rb);
  gtk_box_pack_start (GTK_BOX (vbox15), dotGraphSvg_rb, FALSE, FALSE, 0);
  gtk_radio_button_set_group (GTK_RADIO_BUTTON (dotGraphSvg_rb), dotGraphPng_rb_group);
  dotGraphPng_rb_group = gtk_radio_button_get_group (GTK_RADIO_BUTTON (dotGraphSvg_rb));

  label15 = gtk_label_new (_("<b>Imagetype</b>"));
  gtk_widget_show (label15);
  gtk_frame_set_label_widget (GTK_FRAME (frame4), label15);
  gtk_label_set_use_markup (GTK_LABEL (label15), TRUE);

  toolbar2 = gtk_toolbar_new ();
  gtk_widget_show (toolbar2);
  gtk_box_pack_start (GTK_BOX (vbox13), toolbar2, TRUE, TRUE, 0);
  gtk_toolbar_set_style (GTK_TOOLBAR (toolbar2), GTK_TOOLBAR_BOTH);
  gtk_toolbar_set_orientation (GTK_TOOLBAR (toolbar2), GTK_ORIENTATION_VERTICAL);
  tmp_toolbar_icon_size = gtk_toolbar_get_icon_size (GTK_TOOLBAR (toolbar2));

  dotGraphZoomIn = (GtkWidget*) gtk_tool_button_new_from_stock ("gtk-zoom-in");
  gtk_widget_show (dotGraphZoomIn);
  gtk_container_add (GTK_CONTAINER (toolbar2), dotGraphZoomIn);
  gtk_tool_item_set_tooltip (GTK_TOOL_ITEM (dotGraphZoomIn), tooltips, _("Zoom in in the current topology image"), NULL);

  dotGraphZoomOut = (GtkWidget*) gtk_tool_button_new_from_stock ("gtk-zoom-out");
  gtk_widget_show (dotGraphZoomOut);
  gtk_container_add (GTK_CONTAINER (toolbar2), dotGraphZoomOut);
  gtk_tool_item_set_tooltip (GTK_TOOL_ITEM (dotGraphZoomOut), tooltips, _("Zoom out in the current topology image"), NULL);

  dotgraph_lbl = gtk_label_new (_("Dot graph"));
  gtk_widget_show (dotgraph_lbl);
  gtk_notebook_set_tab_label (GTK_NOTEBOOK (tupleViewNoteBook), gtk_notebook_get_nth_page (GTK_NOTEBOOK (tupleViewNoteBook), 2), dotgraph_lbl);

  tuplesLabel = gtk_label_new (_("Tuples"));
  gtk_widget_show (tuplesLabel);
  gtk_notebook_set_tab_label (GTK_NOTEBOOK (notebook1), gtk_notebook_get_nth_page (GTK_NOTEBOOK (notebook1), 0), tuplesLabel);

  tpDivider = gtk_vbox_new (FALSE, 0);
  gtk_widget_show (tpDivider);
  gtk_container_add (GTK_CONTAINER (notebook1), tpDivider);

  toolbar1 = gtk_toolbar_new ();
  gtk_widget_show (toolbar1);
  gtk_box_pack_start (GTK_BOX (tpDivider), toolbar1, FALSE, FALSE, 0);
  gtk_toolbar_set_style (GTK_TOOLBAR (toolbar1), GTK_TOOLBAR_BOTH);
  tmp_toolbar_icon_size = gtk_toolbar_get_icon_size (GTK_TOOLBAR (toolbar1));

  ecologyZoomIn = (GtkWidget*) gtk_tool_button_new_from_stock ("gtk-zoom-in");
  gtk_widget_show (ecologyZoomIn);
  gtk_container_add (GTK_CONTAINER (toolbar1), ecologyZoomIn);
  gtk_tool_item_set_tooltip (GTK_TOOL_ITEM (ecologyZoomIn), tooltips, _("Zoom in in the current topology image"), NULL);

  ecologyZoomOut = (GtkWidget*) gtk_tool_button_new_from_stock ("gtk-zoom-out");
  gtk_widget_show (ecologyZoomOut);
  gtk_container_add (GTK_CONTAINER (toolbar1), ecologyZoomOut);
  gtk_tool_item_set_tooltip (GTK_TOOL_ITEM (ecologyZoomOut), tooltips, _("Zoom out in the current topology image"), NULL);

  ecologyDetailedNodes = (GtkWidget*) gtk_toggle_tool_button_new ();
  gtk_tool_button_set_label (GTK_TOOL_BUTTON (ecologyDetailedNodes), _("Detailed"));
  tmp_image = gtk_image_new_from_stock ("gtk-info", tmp_toolbar_icon_size);
  gtk_widget_show (tmp_image);
  gtk_tool_button_set_icon_widget (GTK_TOOL_BUTTON (ecologyDetailedNodes), tmp_image);
  gtk_widget_show (ecologyDetailedNodes);
  gtk_container_add (GTK_CONTAINER (toolbar1), ecologyDetailedNodes);
  gtk_tool_item_set_tooltip (GTK_TOOL_ITEM (ecologyDetailedNodes), tooltips, _("Give more detailed information about each node"), NULL);

  ecologyShowConnections = (GtkWidget*) gtk_toggle_tool_button_new ();
  gtk_tool_button_set_label (GTK_TOOL_BUTTON (ecologyShowConnections), _("Connections"));
  tmp_image = gtk_image_new_from_stock ("gtk-connect", tmp_toolbar_icon_size);
  gtk_widget_show (tmp_image);
  gtk_tool_button_set_icon_widget (GTK_TOOL_BUTTON (ecologyShowConnections), tmp_image);
  gtk_widget_show (ecologyShowConnections);
  gtk_container_add (GTK_CONTAINER (toolbar1), ecologyShowConnections);
  gtk_tool_item_set_tooltip (GTK_TOOL_ITEM (ecologyShowConnections), tooltips, _("Show established connections"), NULL);
  gtk_toggle_tool_button_set_active (GTK_TOGGLE_TOOL_BUTTON (ecologyShowConnections), TRUE);

  ecologyShowSubscriptions = (GtkWidget*) gtk_toggle_tool_button_new ();
  gtk_tool_button_set_label (GTK_TOOL_BUTTON (ecologyShowSubscriptions), _("Subscriptions"));
  tmp_image = gtk_image_new_from_stock ("gtk-index", tmp_toolbar_icon_size);
  gtk_widget_show (tmp_image);
  gtk_tool_button_set_icon_widget (GTK_TOOL_BUTTON (ecologyShowSubscriptions), tmp_image);
  gtk_widget_show (ecologyShowSubscriptions);
  gtk_container_add (GTK_CONTAINER (toolbar1), ecologyShowSubscriptions);
  gtk_tool_item_set_tooltip (GTK_TOOL_ITEM (ecologyShowSubscriptions), tooltips, _("Show active subscriptions"), NULL);

  ecologyShowTraffic = (GtkWidget*) gtk_toggle_tool_button_new ();
  gtk_tool_button_set_label (GTK_TOOL_BUTTON (ecologyShowTraffic), _("Traffic"));
  tmp_image = gtk_image_new_from_stock ("gtk-network", tmp_toolbar_icon_size);
  gtk_widget_show (tmp_image);
  gtk_tool_button_set_icon_widget (GTK_TOOL_BUTTON (ecologyShowTraffic), tmp_image);
  gtk_widget_show (ecologyShowTraffic);
  gtk_container_add (GTK_CONTAINER (toolbar1), ecologyShowTraffic);
  gtk_tool_item_set_tooltip (GTK_TOOL_ITEM (ecologyShowTraffic), tooltips, _("Show all traffic above threshold"), NULL);

  toolitem1 = (GtkWidget*) gtk_tool_item_new ();
  gtk_widget_show (toolitem1);
  gtk_container_add (GTK_CONTAINER (toolbar1), toolitem1);

  hbox18 = gtk_hbox_new (FALSE, 0);
  gtk_widget_show (hbox18);
  gtk_container_add (GTK_CONTAINER (toolitem1), hbox18);

  ecologyTrafficLabel0 = gtk_label_new (_("Threshold"));
  gtk_widget_show (ecologyTrafficLabel0);
  gtk_box_pack_start (GTK_BOX (hbox18), ecologyTrafficLabel0, FALSE, FALSE, 0);

  ecologyTrafficThreshold_adj = gtk_adjustment_new (1, 0, 100, 1, 10, 10);
  ecologyTrafficThreshold = gtk_spin_button_new (GTK_ADJUSTMENT (ecologyTrafficThreshold_adj), 1, 0);
  gtk_widget_show (ecologyTrafficThreshold);
  gtk_box_pack_start (GTK_BOX (hbox18), ecologyTrafficThreshold, TRUE, TRUE, 0);
  gtk_spin_button_set_numeric (GTK_SPIN_BUTTON (ecologyTrafficThreshold), TRUE);

  ecologyTrafficLabel = gtk_label_new (_("kBps"));
  gtk_widget_show (ecologyTrafficLabel);
  gtk_box_pack_start (GTK_BOX (hbox18), ecologyTrafficLabel, FALSE, FALSE, 0);

  ecologyClusterComponents = (GtkWidget*) gtk_toggle_tool_button_new ();
  gtk_tool_button_set_label (GTK_TOOL_BUTTON (ecologyClusterComponents), _("Group"));
  tmp_image = gtk_image_new_from_stock ("gtk-sort-ascending", tmp_toolbar_icon_size);
  gtk_widget_show (tmp_image);
  gtk_tool_button_set_icon_widget (GTK_TOOL_BUTTON (ecologyClusterComponents), tmp_image);
  gtk_widget_show (ecologyClusterComponents);
  gtk_container_add (GTK_CONTAINER (toolbar1), ecologyClusterComponents);
  gtk_tool_item_set_tooltip (GTK_TOOL_ITEM (ecologyClusterComponents), tooltips, _("Groups components per PEIS, requires DOT or FDP when rendering."), NULL);

  toolitem2 = (GtkWidget*) gtk_tool_item_new ();
  gtk_widget_show (toolitem2);
  gtk_container_add (GTK_CONTAINER (toolbar1), toolitem2);

  vbox16 = gtk_vbox_new (FALSE, 0);
  gtk_widget_show (vbox16);
  gtk_container_add (GTK_CONTAINER (toolitem2), vbox16);

  ecologyRoutingTableCombo = gtk_combo_box_new_text ();
  gtk_widget_show (ecologyRoutingTableCombo);
  gtk_box_pack_start (GTK_BOX (vbox16), ecologyRoutingTableCombo, TRUE, TRUE, 0);

  ecologyRoutingTableLable = gtk_label_new (_("Routing table"));
  gtk_widget_show (ecologyRoutingTableLable);
  gtk_box_pack_start (GTK_BOX (vbox16), ecologyRoutingTableLable, FALSE, FALSE, 0);

  topologyDrawingScrollWindow = gtk_scrolled_window_new (NULL, NULL);
  gtk_widget_show (topologyDrawingScrollWindow);
  gtk_box_pack_start (GTK_BOX (tpDivider), topologyDrawingScrollWindow, TRUE, TRUE, 0);
  gtk_container_set_border_width (GTK_CONTAINER (topologyDrawingScrollWindow), 1);
  gtk_scrolled_window_set_shadow_type (GTK_SCROLLED_WINDOW (topologyDrawingScrollWindow), GTK_SHADOW_OUT);

  topologyDrawingViewport = gtk_viewport_new (NULL, NULL);
  gtk_widget_show (topologyDrawingViewport);
  gtk_container_add (GTK_CONTAINER (topologyDrawingScrollWindow), topologyDrawingViewport);

  topologyDrawingArea = gtk_drawing_area_new ();
  gtk_widget_show (topologyDrawingArea);
  gtk_container_add (GTK_CONTAINER (topologyDrawingViewport), topologyDrawingArea);

  topologyUpdatebar = gtk_hbox_new (FALSE, 0);
  gtk_widget_show (topologyUpdatebar);
  gtk_box_pack_start (GTK_BOX (tpDivider), topologyUpdatebar, FALSE, TRUE, 0);

  renderingEngine = gtk_combo_box_new_text ();
  gtk_widget_show (renderingEngine);
  gtk_box_pack_start (GTK_BOX (topologyUpdatebar), renderingEngine, FALSE, TRUE, 0);
  gtk_combo_box_append_text (GTK_COMBO_BOX (renderingEngine), _("Renderer: Circo"));
  gtk_combo_box_append_text (GTK_COMBO_BOX (renderingEngine), _("Renderer: Dot"));
  gtk_combo_box_append_text (GTK_COMBO_BOX (renderingEngine), _("Renderer: FDP"));

  tmp_image = gtk_image_new_from_stock ("gtk-refresh", tmp_toolbar_icon_size);
  gtk_widget_show (tmp_image);
  topologyUpdate = (GtkWidget*) gtk_tool_button_new (tmp_image, _("Update"));
  gtk_widget_show (topologyUpdate);
  gtk_box_pack_start (GTK_BOX (topologyUpdatebar), topologyUpdate, FALSE, TRUE, 0);
  gtk_tool_item_set_tooltip (GTK_TOOL_ITEM (topologyUpdate), tooltips, _("Updates the view of the topology"), NULL);

  topologyUpdateInterval = gtk_combo_box_new_text ();
  gtk_widget_show (topologyUpdateInterval);
  gtk_box_pack_start (GTK_BOX (topologyUpdatebar), topologyUpdateInterval, FALSE, FALSE, 0);
  gtk_widget_set_size_request (topologyUpdateInterval, 130, -1);
  gtk_combo_box_append_text (GTK_COMBO_BOX (topologyUpdateInterval), _("Once"));
  gtk_combo_box_append_text (GTK_COMBO_BOX (topologyUpdateInterval), _("Every 0.5s"));
  gtk_combo_box_append_text (GTK_COMBO_BOX (topologyUpdateInterval), _("Every 1s"));
  gtk_combo_box_append_text (GTK_COMBO_BOX (topologyUpdateInterval), _("Every 2s"));
  gtk_combo_box_append_text (GTK_COMBO_BOX (topologyUpdateInterval), _("Every 5s"));
  gtk_combo_box_append_text (GTK_COMBO_BOX (topologyUpdateInterval), _("Every 10s"));
  gtk_combo_box_append_text (GTK_COMBO_BOX (topologyUpdateInterval), _("Every 20s"));

  ecologyProgressBar = gtk_progress_bar_new ();
  gtk_widget_show (ecologyProgressBar);
  gtk_box_pack_start (GTK_BOX (topologyUpdatebar), ecologyProgressBar, TRUE, TRUE, 0);
  gtk_widget_set_size_request (ecologyProgressBar, 150, -1);
  gtk_tooltips_set_tip (tooltips, ecologyProgressBar, _("Shows progress while recomputing topology image"), NULL);
  gtk_progress_bar_set_ellipsize (GTK_PROGRESS_BAR (ecologyProgressBar), PANGO_ELLIPSIZE_START);

  tmp_image = gtk_image_new_from_stock ("gtk-cancel", tmp_toolbar_icon_size);
  gtk_widget_show (tmp_image);
  topologyCancel = (GtkWidget*) gtk_tool_button_new (tmp_image, _("Cancel"));
  gtk_widget_show (topologyCancel);
  gtk_box_pack_start (GTK_BOX (topologyUpdatebar), topologyCancel, FALSE, FALSE, 0);
  gtk_tool_item_set_tooltip (GTK_TOOL_ITEM (topologyCancel), tooltips, _("Abort the computation of topology image"), NULL);

  ecologyLabel = gtk_label_new (_("Ecology"));
  gtk_widget_show (ecologyLabel);
  gtk_notebook_set_tab_label (GTK_NOTEBOOK (notebook1), gtk_notebook_get_nth_page (GTK_NOTEBOOK (notebook1), 1), ecologyLabel);

  statusHBox = gtk_hbox_new (FALSE, 0);
  gtk_widget_show (statusHBox);
  gtk_box_pack_start (GTK_BOX (MenuMainStatusArea), statusHBox, FALSE, FALSE, 0);

  clockLabel = gtk_label_new (_("2007-02-23 11:00"));
  gtk_widget_show (clockLabel);
  gtk_box_pack_start (GTK_BOX (statusHBox), clockLabel, FALSE, FALSE, 0);

  statusbar = gtk_statusbar_new ();
  gtk_widget_show (statusbar);
  gtk_box_pack_start (GTK_BOX (statusHBox), statusbar, TRUE, TRUE, 0);

  g_signal_connect ((gpointer) mainwindow, "destroy",
                    G_CALLBACK (on_mainwindow_destroy),
                    NULL);
  g_signal_connect ((gpointer) mainwindow, "destroy_event",
                    G_CALLBACK (on_mainwindow_destroy_event),
                    NULL);
  g_signal_connect ((gpointer) mainwindow, "delete_event",
                    G_CALLBACK (on_mainwindow_delete_event),
                    NULL);
  g_signal_connect ((gpointer) save_tuple, "activate",
                    G_CALLBACK (on_save_tuple_activate),
                    NULL);
  g_signal_connect ((gpointer) save_image, "activate",
                    G_CALLBACK (on_save_image_activate),
                    NULL);
  g_signal_connect ((gpointer) quit, "activate",
                    G_CALLBACK (on_quit_activate),
                    NULL);
  g_signal_connect ((gpointer) cut1, "activate",
                    G_CALLBACK (on_cut1_activate),
                    NULL);
  g_signal_connect ((gpointer) copy1, "activate",
                    G_CALLBACK (on_copy1_activate),
                    NULL);
  g_signal_connect ((gpointer) paste1, "activate",
                    G_CALLBACK (on_paste1_activate),
                    NULL);
  g_signal_connect ((gpointer) delete1, "activate",
                    G_CALLBACK (on_delete1_activate),
                    NULL);
  g_signal_connect ((gpointer) preferencesMenu, "activate",
                    G_CALLBACK (on_preferencesMenu_activate),
                    NULL);
  g_signal_connect ((gpointer) menuEcology, "activate",
                    G_CALLBACK (on_menuEcology_activate),
                    NULL);
  g_signal_connect ((gpointer) menuConnect, "activate",
                    G_CALLBACK (on_menuConnect_activate),
                    NULL);
  g_signal_connect ((gpointer) about1, "activate",
                    G_CALLBACK (on_about1_activate),
                    NULL);
  g_signal_connect ((gpointer) notebook1, "switch_page",
                    G_CALLBACK (on_tupleviewNotebook_switch_page),
                    NULL);
  g_signal_connect ((gpointer) peistreeview, "button_press_event",
                    G_CALLBACK (on_peistreeview_button_press_event),
                    NULL);
  g_signal_connect ((gpointer) tupleKeyEntry, "changed",
                    G_CALLBACK (on_tupleKeyEntry_changed),
                    NULL);
  g_signal_connect ((gpointer) submitButton, "pressed",
                    G_CALLBACK (on_submitButton_pressed),
                    NULL);
  g_signal_connect ((gpointer) grabButton, "pressed",
                    G_CALLBACK (on_grabButton_pressed),
                    NULL);
  g_signal_connect ((gpointer) tsExpireEntry21, "changed",
                    G_CALLBACK (on_tsExpireEntry21_changed),
                    NULL);
  g_signal_connect ((gpointer) tsUserEntry21, "changed",
                    G_CALLBACK (on_tsUserEntry21_changed),
                    NULL);
  g_signal_connect ((gpointer) editValueTextView, "key_release_event",
                    G_CALLBACK (on_editValueTextView_key_release_event),
                    NULL);
  g_signal_connect ((gpointer) editValueTextView, "key_press_event",
                    G_CALLBACK (on_editValueTextView_key_press_event),
                    NULL);
  g_signal_connect ((gpointer) tupleImageViewport, "button_press_event",
                    G_CALLBACK (on_tupleImageViewport_button_press_event),
                    NULL);
  g_signal_connect ((gpointer) tupleImageViewport, "key_press_event",
                    G_CALLBACK (on_tupleImageViewport_key_press_event),
                    NULL);
  g_signal_connect ((gpointer) tupleDrawingArea, "expose_event",
                    G_CALLBACK (on_tupleDrawingArea_expose_event),
                    NULL);
  g_signal_connect ((gpointer) imageInfoClickableButton, "toggled",
                    G_CALLBACK (on_imageInfoClickableButton_toggled),
                    NULL);
  g_signal_connect ((gpointer) imageInfoKeyboardButton, "toggled",
                    G_CALLBACK (on_imageInfoKeyboardButton_toggled),
                    NULL);
  g_signal_connect ((gpointer) imageInfoXYText, "editing_done",
                    G_CALLBACK (on_imageInfoXYText_editing_done),
                    NULL);
  g_signal_connect ((gpointer) imageInfoUVText, "editing_done",
                    G_CALLBACK (on_imageInfoUVText_editing_done),
                    NULL);
  g_signal_connect ((gpointer) viewport1, "button_press_event",
                    G_CALLBACK (on_tupleImageViewport_button_press_event),
                    NULL);
  g_signal_connect ((gpointer) viewport1, "key_press_event",
                    G_CALLBACK (on_tupleImageViewport_key_press_event),
                    NULL);
  g_signal_connect ((gpointer) dotGraphDrawingArea, "expose_event",
                    G_CALLBACK (on_dotGraphDrawingArea_expose_event),
                    NULL);
  g_signal_connect ((gpointer) dotGraphDot_rb, "toggled",
                    G_CALLBACK (on_dotGraph_rb_toggled),
                    NULL);
  g_signal_connect ((gpointer) dotGraphFdp_rb, "toggled",
                    G_CALLBACK (on_dotGraph_rb_toggled),
                    NULL);
  g_signal_connect ((gpointer) dotGraphCirco_rb, "toggled",
                    G_CALLBACK (on_dotGraph_rb_toggled),
                    NULL);
  g_signal_connect ((gpointer) dotGraphPng_rb, "toggled",
                    G_CALLBACK (on_dotGraph_rb_toggled),
                    NULL);
  g_signal_connect ((gpointer) dotGraphSvg_rb, "toggled",
                    G_CALLBACK (on_dotGraph_rb_toggled),
                    NULL);
  g_signal_connect ((gpointer) dotGraphZoomIn, "clicked",
                    G_CALLBACK (on_dotGraphZoomIn_clicked),
                    NULL);
  g_signal_connect ((gpointer) dotGraphZoomOut, "clicked",
                    G_CALLBACK (on_dotGraphZoomOut_clicked),
                    NULL);
  g_signal_connect ((gpointer) ecologyZoomIn, "clicked",
                    G_CALLBACK (on_topologyZoomIn_clicked),
                    NULL);
  g_signal_connect ((gpointer) ecologyZoomOut, "clicked",
                    G_CALLBACK (on_topologyZoomOut_clicked),
                    NULL);
  g_signal_connect ((gpointer) topologyDrawingArea, "expose_event",
                    G_CALLBACK (on_topologyDrawingArea_expose_event),
                    NULL);
  g_signal_connect ((gpointer) topologyUpdate, "clicked",
                    G_CALLBACK (on_topologyUpdate_clicked),
                    NULL);
  g_signal_connect ((gpointer) topologyCancel, "clicked",
                    G_CALLBACK (on_topologyCancel_clicked),
                    NULL);

  /* Store pointers to all widgets, for use by lookup_widget(). */
  GLADE_HOOKUP_OBJECT_NO_REF (mainwindow, mainwindow, "mainwindow");
  GLADE_HOOKUP_OBJECT (mainwindow, MenuMainStatusArea, "MenuMainStatusArea");
  GLADE_HOOKUP_OBJECT (mainwindow, menubar, "menubar");
  GLADE_HOOKUP_OBJECT (mainwindow, menuitem1, "menuitem1");
  GLADE_HOOKUP_OBJECT (mainwindow, menuitem1_menu, "menuitem1_menu");
  GLADE_HOOKUP_OBJECT (mainwindow, save_tuple, "save_tuple");
  GLADE_HOOKUP_OBJECT (mainwindow, image21, "image21");
  GLADE_HOOKUP_OBJECT (mainwindow, save_image, "save_image");
  GLADE_HOOKUP_OBJECT (mainwindow, image22, "image22");
  GLADE_HOOKUP_OBJECT (mainwindow, separatormenuitem1, "separatormenuitem1");
  GLADE_HOOKUP_OBJECT (mainwindow, quit, "quit");
  GLADE_HOOKUP_OBJECT (mainwindow, menuitem2, "menuitem2");
  GLADE_HOOKUP_OBJECT (mainwindow, menuitem2_menu, "menuitem2_menu");
  GLADE_HOOKUP_OBJECT (mainwindow, cut1, "cut1");
  GLADE_HOOKUP_OBJECT (mainwindow, copy1, "copy1");
  GLADE_HOOKUP_OBJECT (mainwindow, paste1, "paste1");
  GLADE_HOOKUP_OBJECT (mainwindow, delete1, "delete1");
  GLADE_HOOKUP_OBJECT (mainwindow, preferencesMenu, "preferencesMenu");
  GLADE_HOOKUP_OBJECT (mainwindow, image23, "image23");
  GLADE_HOOKUP_OBJECT (mainwindow, menuitem3, "menuitem3");
  GLADE_HOOKUP_OBJECT (mainwindow, menuEcology, "menuEcology");
  GLADE_HOOKUP_OBJECT (mainwindow, menuEcology_menu, "menuEcology_menu");
  GLADE_HOOKUP_OBJECT (mainwindow, menuConnect, "menuConnect");
  GLADE_HOOKUP_OBJECT (mainwindow, image24, "image24");
  GLADE_HOOKUP_OBJECT (mainwindow, menuitem4, "menuitem4");
  GLADE_HOOKUP_OBJECT (mainwindow, menuitem4_menu, "menuitem4_menu");
  GLADE_HOOKUP_OBJECT (mainwindow, about1, "about1");
  GLADE_HOOKUP_OBJECT (mainwindow, notebook1, "notebook1");
  GLADE_HOOKUP_OBJECT (mainwindow, TupleTreeContentArea, "TupleTreeContentArea");
  GLADE_HOOKUP_OBJECT (mainwindow, tupleTree, "tupleTree");
  GLADE_HOOKUP_OBJECT (mainwindow, peistreeview, "peistreeview");
  GLADE_HOOKUP_OBJECT (mainwindow, tupleContentArea, "tupleContentArea");
  GLADE_HOOKUP_OBJECT (mainwindow, tupleInfoFrame, "tupleInfoFrame");
  GLADE_HOOKUP_OBJECT (mainwindow, alignment3, "alignment3");
  GLADE_HOOKUP_OBJECT (mainwindow, table2, "table2");
  GLADE_HOOKUP_OBJECT (mainwindow, hbox1, "hbox1");
  GLADE_HOOKUP_OBJECT (mainwindow, label3, "label3");
  GLADE_HOOKUP_OBJECT (mainwindow, creatorEntry, "creatorEntry");
  GLADE_HOOKUP_OBJECT (mainwindow, tsExpireEntry2, "tsExpireEntry2");
  GLADE_HOOKUP_OBJECT (mainwindow, tsExpireEntry, "tsExpireEntry");
  GLADE_HOOKUP_OBJECT (mainwindow, tsExpireLabel, "tsExpireLabel");
  GLADE_HOOKUP_OBJECT (mainwindow, tsUserLabel1, "tsUserLabel1");
  GLADE_HOOKUP_OBJECT (mainwindow, tsWriteLabel1, "tsWriteLabel1");
  GLADE_HOOKUP_OBJECT (mainwindow, tupleKeyLabel, "tupleKeyLabel");
  GLADE_HOOKUP_OBJECT (mainwindow, componentIDlabel1, "componentIDlabel1");
  GLADE_HOOKUP_OBJECT (mainwindow, tsUserEntry, "tsUserEntry");
  GLADE_HOOKUP_OBJECT (mainwindow, tsUserEntry2, "tsUserEntry2");
  GLADE_HOOKUP_OBJECT (mainwindow, tsWriteEntry2, "tsWriteEntry2");
  GLADE_HOOKUP_OBJECT (mainwindow, tsWriteEntry, "tsWriteEntry");
  GLADE_HOOKUP_OBJECT (mainwindow, tupleKeyEntry, "tupleKeyEntry");
  GLADE_HOOKUP_OBJECT (mainwindow, ownerEntry, "ownerEntry");
  GLADE_HOOKUP_OBJECT (mainwindow, tupleInfoLabel, "tupleInfoLabel");
  GLADE_HOOKUP_OBJECT (mainwindow, tupleViewNoteBook, "tupleViewNoteBook");
  GLADE_HOOKUP_OBJECT (mainwindow, tupleTextPane, "tupleTextPane");
  GLADE_HOOKUP_OBJECT (mainwindow, currentValueFrame, "currentValueFrame");
  GLADE_HOOKUP_OBJECT (mainwindow, alignment1, "alignment1");
  GLADE_HOOKUP_OBJECT (mainwindow, scrolledwindow1, "scrolledwindow1");
  GLADE_HOOKUP_OBJECT (mainwindow, currentValueTextView, "currentValueTextView");
  GLADE_HOOKUP_OBJECT (mainwindow, currentValueLabel, "currentValueLabel");
  GLADE_HOOKUP_OBJECT (mainwindow, vbox2, "vbox2");
  GLADE_HOOKUP_OBJECT (mainwindow, hbox2, "hbox2");
  GLADE_HOOKUP_OBJECT (mainwindow, submitButton, "submitButton");
  GLADE_HOOKUP_OBJECT (mainwindow, alignment5, "alignment5");
  GLADE_HOOKUP_OBJECT (mainwindow, hbox4, "hbox4");
  GLADE_HOOKUP_OBJECT (mainwindow, image7, "image7");
  GLADE_HOOKUP_OBJECT (mainwindow, label2, "label2");
  GLADE_HOOKUP_OBJECT (mainwindow, grabButton, "grabButton");
  GLADE_HOOKUP_OBJECT (mainwindow, alignment4, "alignment4");
  GLADE_HOOKUP_OBJECT (mainwindow, hbox3, "hbox3");
  GLADE_HOOKUP_OBJECT (mainwindow, image6, "image6");
  GLADE_HOOKUP_OBJECT (mainwindow, label1, "label1");
  GLADE_HOOKUP_OBJECT (mainwindow, editValueFrame, "editValueFrame");
  GLADE_HOOKUP_OBJECT (mainwindow, alignment2, "alignment2");
  GLADE_HOOKUP_OBJECT (mainwindow, vbox9, "vbox9");
  GLADE_HOOKUP_OBJECT (mainwindow, table3, "table3");
  GLADE_HOOKUP_OBJECT (mainwindow, tsExpireEntry22, "tsExpireEntry22");
  GLADE_HOOKUP_OBJECT (mainwindow, tsExpireEntry21, "tsExpireEntry21");
  GLADE_HOOKUP_OBJECT (mainwindow, tsUserEntry22, "tsUserEntry22");
  GLADE_HOOKUP_OBJECT (mainwindow, tsUserEntry21, "tsUserEntry21");
  GLADE_HOOKUP_OBJECT (mainwindow, ts_expireLabel2, "ts_expireLabel2");
  GLADE_HOOKUP_OBJECT (mainwindow, ts_userLabel2, "ts_userLabel2");
  GLADE_HOOKUP_OBJECT (mainwindow, scrolledwindow2, "scrolledwindow2");
  GLADE_HOOKUP_OBJECT (mainwindow, editValueTextView, "editValueTextView");
  GLADE_HOOKUP_OBJECT (mainwindow, editValueLabel, "editValueLabel");
  GLADE_HOOKUP_OBJECT (mainwindow, noteTabAsText, "noteTabAsText");
  GLADE_HOOKUP_OBJECT (mainwindow, hbox13, "hbox13");
  GLADE_HOOKUP_OBJECT (mainwindow, tupleImageScrollWindow, "tupleImageScrollWindow");
  GLADE_HOOKUP_OBJECT (mainwindow, tupleImageViewport, "tupleImageViewport");
  GLADE_HOOKUP_OBJECT (mainwindow, tupleDrawingArea, "tupleDrawingArea");
  GLADE_HOOKUP_OBJECT (mainwindow, ImageInfoVBox, "ImageInfoVBox");
  GLADE_HOOKUP_OBJECT (mainwindow, imageInfoInterfaceFrame, "imageInfoInterfaceFrame");
  GLADE_HOOKUP_OBJECT (mainwindow, alignment9, "alignment9");
  GLADE_HOOKUP_OBJECT (mainwindow, imageInfoInterfaceVBox, "imageInfoInterfaceVBox");
  GLADE_HOOKUP_OBJECT (mainwindow, imageInfoClickableButton, "imageInfoClickableButton");
  GLADE_HOOKUP_OBJECT (mainwindow, imageInfoKeyboardButton, "imageInfoKeyboardButton");
  GLADE_HOOKUP_OBJECT (mainwindow, imageInfoInterfaceLabel, "imageInfoInterfaceLabel");
  GLADE_HOOKUP_OBJECT (mainwindow, ImageInfoPropFrame, "ImageInfoPropFrame");
  GLADE_HOOKUP_OBJECT (mainwindow, alignment8, "alignment8");
  GLADE_HOOKUP_OBJECT (mainwindow, ImageInfoPropVBox, "ImageInfoPropVBox");
  GLADE_HOOKUP_OBJECT (mainwindow, imageInfoTypeHBox, "imageInfoTypeHBox");
  GLADE_HOOKUP_OBJECT (mainwindow, imageInfoTypeLabel, "imageInfoTypeLabel");
  GLADE_HOOKUP_OBJECT (mainwindow, imageInfoTypeText, "imageInfoTypeText");
  GLADE_HOOKUP_OBJECT (mainwindow, imageInfoSizeHBox, "imageInfoSizeHBox");
  GLADE_HOOKUP_OBJECT (mainwindow, imageInfoSizeLabel, "imageInfoSizeLabel");
  GLADE_HOOKUP_OBJECT (mainwindow, imageInfoSizeText, "imageInfoSizeText");
  GLADE_HOOKUP_OBJECT (mainwindow, imageInfoPropLabel, "imageInfoPropLabel");
  GLADE_HOOKUP_OBJECT (mainwindow, imageInfoPosFrame, "imageInfoPosFrame");
  GLADE_HOOKUP_OBJECT (mainwindow, alignment6, "alignment6");
  GLADE_HOOKUP_OBJECT (mainwindow, vbox7, "vbox7");
  GLADE_HOOKUP_OBJECT (mainwindow, imageInfoXYHBox, "imageInfoXYHBox");
  GLADE_HOOKUP_OBJECT (mainwindow, imageInfoXYLabel, "imageInfoXYLabel");
  GLADE_HOOKUP_OBJECT (mainwindow, imageInfoXYText, "imageInfoXYText");
  GLADE_HOOKUP_OBJECT (mainwindow, imageInfoUVHBox, "imageInfoUVHBox");
  GLADE_HOOKUP_OBJECT (mainwindow, imageInfoUVLabel, "imageInfoUVLabel");
  GLADE_HOOKUP_OBJECT (mainwindow, imageInfoUVText, "imageInfoUVText");
  GLADE_HOOKUP_OBJECT (mainwindow, label8, "label8");
  GLADE_HOOKUP_OBJECT (mainwindow, imageInfoValFrame, "imageInfoValFrame");
  GLADE_HOOKUP_OBJECT (mainwindow, alignment7, "alignment7");
  GLADE_HOOKUP_OBJECT (mainwindow, vbox8, "vbox8");
  GLADE_HOOKUP_OBJECT (mainwindow, imageInfoRGBHBox, "imageInfoRGBHBox");
  GLADE_HOOKUP_OBJECT (mainwindow, imageInfoRGBlabel, "imageInfoRGBlabel");
  GLADE_HOOKUP_OBJECT (mainwindow, imageInfoRGBText, "imageInfoRGBText");
  GLADE_HOOKUP_OBJECT (mainwindow, imageInfoHSVHBox, "imageInfoHSVHBox");
  GLADE_HOOKUP_OBJECT (mainwindow, imageInfoHSVLabel, "imageInfoHSVLabel");
  GLADE_HOOKUP_OBJECT (mainwindow, imageInfoHSVText, "imageInfoHSVText");
  GLADE_HOOKUP_OBJECT (mainwindow, label9, "label9");
  GLADE_HOOKUP_OBJECT (mainwindow, imageInfoSpaceLabel, "imageInfoSpaceLabel");
  GLADE_HOOKUP_OBJECT (mainwindow, noteTabAsImage, "noteTabAsImage");
  GLADE_HOOKUP_OBJECT (mainwindow, hbox17, "hbox17");
  GLADE_HOOKUP_OBJECT (mainwindow, scrolledwindow3, "scrolledwindow3");
  GLADE_HOOKUP_OBJECT (mainwindow, viewport1, "viewport1");
  GLADE_HOOKUP_OBJECT (mainwindow, dotGraphDrawingArea, "dotGraphDrawingArea");
  GLADE_HOOKUP_OBJECT (mainwindow, vbox13, "vbox13");
  GLADE_HOOKUP_OBJECT (mainwindow, frame3, "frame3");
  GLADE_HOOKUP_OBJECT (mainwindow, alignment12, "alignment12");
  GLADE_HOOKUP_OBJECT (mainwindow, vbox14, "vbox14");
  GLADE_HOOKUP_OBJECT (mainwindow, dotGraphDot_rb, "dotGraphDot_rb");
  GLADE_HOOKUP_OBJECT (mainwindow, dotGraphFdp_rb, "dotGraphFdp_rb");
  GLADE_HOOKUP_OBJECT (mainwindow, dotGraphCirco_rb, "dotGraphCirco_rb");
  GLADE_HOOKUP_OBJECT (mainwindow, label14, "label14");
  GLADE_HOOKUP_OBJECT (mainwindow, frame4, "frame4");
  GLADE_HOOKUP_OBJECT (mainwindow, alignment13, "alignment13");
  GLADE_HOOKUP_OBJECT (mainwindow, vbox15, "vbox15");
  GLADE_HOOKUP_OBJECT (mainwindow, dotGraphPng_rb, "dotGraphPng_rb");
  GLADE_HOOKUP_OBJECT (mainwindow, dotGraphSvg_rb, "dotGraphSvg_rb");
  GLADE_HOOKUP_OBJECT (mainwindow, label15, "label15");
  GLADE_HOOKUP_OBJECT (mainwindow, toolbar2, "toolbar2");
  GLADE_HOOKUP_OBJECT (mainwindow, dotGraphZoomIn, "dotGraphZoomIn");
  GLADE_HOOKUP_OBJECT (mainwindow, dotGraphZoomOut, "dotGraphZoomOut");
  GLADE_HOOKUP_OBJECT (mainwindow, dotgraph_lbl, "dotgraph_lbl");
  GLADE_HOOKUP_OBJECT (mainwindow, tuplesLabel, "tuplesLabel");
  GLADE_HOOKUP_OBJECT (mainwindow, tpDivider, "tpDivider");
  GLADE_HOOKUP_OBJECT (mainwindow, toolbar1, "toolbar1");
  GLADE_HOOKUP_OBJECT (mainwindow, ecologyZoomIn, "ecologyZoomIn");
  GLADE_HOOKUP_OBJECT (mainwindow, ecologyZoomOut, "ecologyZoomOut");
  GLADE_HOOKUP_OBJECT (mainwindow, ecologyDetailedNodes, "ecologyDetailedNodes");
  GLADE_HOOKUP_OBJECT (mainwindow, ecologyShowConnections, "ecologyShowConnections");
  GLADE_HOOKUP_OBJECT (mainwindow, ecologyShowSubscriptions, "ecologyShowSubscriptions");
  GLADE_HOOKUP_OBJECT (mainwindow, ecologyShowTraffic, "ecologyShowTraffic");
  GLADE_HOOKUP_OBJECT (mainwindow, toolitem1, "toolitem1");
  GLADE_HOOKUP_OBJECT (mainwindow, hbox18, "hbox18");
  GLADE_HOOKUP_OBJECT (mainwindow, ecologyTrafficLabel0, "ecologyTrafficLabel0");
  GLADE_HOOKUP_OBJECT (mainwindow, ecologyTrafficThreshold, "ecologyTrafficThreshold");
  GLADE_HOOKUP_OBJECT (mainwindow, ecologyTrafficLabel, "ecologyTrafficLabel");
  GLADE_HOOKUP_OBJECT (mainwindow, ecologyClusterComponents, "ecologyClusterComponents");
  GLADE_HOOKUP_OBJECT (mainwindow, toolitem2, "toolitem2");
  GLADE_HOOKUP_OBJECT (mainwindow, vbox16, "vbox16");
  GLADE_HOOKUP_OBJECT (mainwindow, ecologyRoutingTableCombo, "ecologyRoutingTableCombo");
  GLADE_HOOKUP_OBJECT (mainwindow, ecologyRoutingTableLable, "ecologyRoutingTableLable");
  GLADE_HOOKUP_OBJECT (mainwindow, topologyDrawingScrollWindow, "topologyDrawingScrollWindow");
  GLADE_HOOKUP_OBJECT (mainwindow, topologyDrawingViewport, "topologyDrawingViewport");
  GLADE_HOOKUP_OBJECT (mainwindow, topologyDrawingArea, "topologyDrawingArea");
  GLADE_HOOKUP_OBJECT (mainwindow, topologyUpdatebar, "topologyUpdatebar");
  GLADE_HOOKUP_OBJECT (mainwindow, renderingEngine, "renderingEngine");
  GLADE_HOOKUP_OBJECT (mainwindow, topologyUpdate, "topologyUpdate");
  GLADE_HOOKUP_OBJECT (mainwindow, topologyUpdateInterval, "topologyUpdateInterval");
  GLADE_HOOKUP_OBJECT (mainwindow, ecologyProgressBar, "ecologyProgressBar");
  GLADE_HOOKUP_OBJECT (mainwindow, topologyCancel, "topologyCancel");
  GLADE_HOOKUP_OBJECT (mainwindow, ecologyLabel, "ecologyLabel");
  GLADE_HOOKUP_OBJECT (mainwindow, statusHBox, "statusHBox");
  GLADE_HOOKUP_OBJECT (mainwindow, clockLabel, "clockLabel");
  GLADE_HOOKUP_OBJECT (mainwindow, statusbar, "statusbar");
  GLADE_HOOKUP_OBJECT_NO_REF (mainwindow, tooltips, "tooltips");

  gtk_widget_grab_focus (tupleImageViewport);
  gtk_window_add_accel_group (GTK_WINDOW (mainwindow), accel_group);

  return mainwindow;
}

GtkWidget*
create_aboutdialog (void)
{
  GtkWidget *aboutdialog;
  const gchar *authors[] = {
    "Mathias Broxvall",
    NULL
  };
  /* TRANSLATORS: Replace this string with your names, one name per line. */
  gchar *translators = _("translator-credits");
  GdkPixbuf *aboutdialog_logo_pixbuf;
  GtkWidget *dialog_vbox1;

  aboutdialog = gtk_about_dialog_new ();
  gtk_container_set_border_width (GTK_CONTAINER (aboutdialog), 5);
  gtk_window_set_destroy_with_parent (GTK_WINDOW (aboutdialog), TRUE);
  gtk_about_dialog_set_version (GTK_ABOUT_DIALOG (aboutdialog), VERSION);
  gtk_about_dialog_set_name (GTK_ABOUT_DIALOG (aboutdialog), _("Tupleview"));
  gtk_about_dialog_set_copyright (GTK_ABOUT_DIALOG (aboutdialog), _(" Copyright (C) 2005 - 2006  Mathias Broxvall"));
  gtk_about_dialog_set_comments (GTK_ABOUT_DIALOG (aboutdialog), _("This program is used for visualizing and editing tuples in the distributed tuplespace as well as for debugging the network topology and visualizing which subscriptions exists in the tuplespace. \n"));
  gtk_about_dialog_set_license (GTK_ABOUT_DIALOG (aboutdialog), _("This program is free software; you can redistribute it and/or modify it under the terms of the GNU General Public License as published by the Free Software Foundation; either version 2 of the License, or (at your option) any later version.\n   \nThis program is distributed in the hope that it will be useful, but WITHOUT ANY WARRANTY; without even the implied warranty of  MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License for more details.\n   \nYou should have received a copy of the GNU General Public License along with this program; if not, write to the Free Software Foundation, Inc., 59 Temple Place, Suite 330, Boston, MA  02111-1307  USA\n"));
  gtk_about_dialog_set_wrap_license (GTK_ABOUT_DIALOG (aboutdialog), TRUE);
  gtk_about_dialog_set_website_label (GTK_ABOUT_DIALOG (aboutdialog), _("http://www.aass.oru.se/~peis"));
  gtk_about_dialog_set_authors (GTK_ABOUT_DIALOG (aboutdialog), authors);
  gtk_about_dialog_set_translator_credits (GTK_ABOUT_DIALOG (aboutdialog), translators);
  aboutdialog_logo_pixbuf = create_pixbuf ("tupleview-logo.png");
  gtk_about_dialog_set_logo (GTK_ABOUT_DIALOG (aboutdialog), aboutdialog_logo_pixbuf);

  dialog_vbox1 = gtk_vbox_new (FALSE, 0);
  gtk_container_add (GTK_CONTAINER (aboutdialog), dialog_vbox1);

  g_signal_connect ((gpointer) aboutdialog, "close",
                    G_CALLBACK (on_aboutdialog_close),
                    NULL);
  g_signal_connect ((gpointer) aboutdialog, "response",
                    G_CALLBACK (on_aboutdialog_response),
                    NULL);

  /* Store pointers to all widgets, for use by lookup_widget(). */
  GLADE_HOOKUP_OBJECT_NO_REF (aboutdialog, aboutdialog, "aboutdialog");
  GLADE_HOOKUP_OBJECT (aboutdialog, dialog_vbox1, "dialog_vbox1");

  return aboutdialog;
}

GtkWidget*
create_preferencesWindow (void)
{
  GtkWidget *preferencesWindow;
  GtkWidget *vbox3;
  GtkWidget *table4;
  GtkWidget *preferencesCaptionLabel;
  GtkWidget *image14;
  GtkWidget *frame2;
  GtkWidget *alignment11;
  GtkWidget *vbox11;
  GtkWidget *prefDetailedComponentInfo_checkbutton;
  GtkWidget *tuplePrefFrame;
  GtkWidget *topologyPrefFrame;
  GtkWidget *alignment10;
  GtkWidget *vbox10;
  GtkWidget *hbox15;
  GtkWidget *prefRenderingFormat;
  GtkWidget *renderingFormatLabel;
  GtkWidget *prefExcludeTupleview_checkbutton;
  GtkWidget *prefExcludePeisInits_checkbutton;
  GtkWidget *prefCopyTopologyImages_checkbutton;
  GtkWidget *prefCopyDotFiles_checkbutton;
  GtkWidget *hbox16;
  GtkWidget *prefImageDotFileLabeling_combobox;
  GtkWidget *imageDotFile_label;
  GtkWidget *prefUpdateTopologyView_checkbutton;
  GtkWidget *label10;
  GtkWidget *hbox5;
  GtkWidget *prefOK;
  GtkWidget *prefCancel;
  GtkWidget *statusbar1;
  GtkTooltips *tooltips;

  tooltips = gtk_tooltips_new ();

  preferencesWindow = gtk_window_new (GTK_WINDOW_TOPLEVEL);
  gtk_window_set_title (GTK_WINDOW (preferencesWindow), _("Preferences"));

  vbox3 = gtk_vbox_new (FALSE, 0);
  gtk_widget_show (vbox3);
  gtk_container_add (GTK_CONTAINER (preferencesWindow), vbox3);

  table4 = gtk_table_new (1, 2, FALSE);
  gtk_widget_show (table4);
  gtk_box_pack_start (GTK_BOX (vbox3), table4, TRUE, TRUE, 0);

  preferencesCaptionLabel = gtk_label_new (_("<b>Tupleview</b>\npreferences\n"));
  gtk_widget_show (preferencesCaptionLabel);
  gtk_table_attach (GTK_TABLE (table4), preferencesCaptionLabel, 0, 1, 0, 1,
                    (GtkAttachOptions) (0),
                    (GtkAttachOptions) (0), 0, 0);
  gtk_label_set_use_markup (GTK_LABEL (preferencesCaptionLabel), TRUE);
  gtk_label_set_justify (GTK_LABEL (preferencesCaptionLabel), GTK_JUSTIFY_CENTER);
  gtk_label_set_angle (GTK_LABEL (preferencesCaptionLabel), 45);

  image14 = create_pixmap (preferencesWindow, "tupleview-logo.png");
  gtk_widget_show (image14);
  gtk_table_attach (GTK_TABLE (table4), image14, 1, 2, 0, 1,
                    (GtkAttachOptions) (GTK_EXPAND | GTK_FILL),
                    (GtkAttachOptions) (0), 0, 0);

  frame2 = gtk_frame_new (NULL);
  gtk_widget_show (frame2);
  gtk_box_pack_start (GTK_BOX (vbox3), frame2, TRUE, TRUE, 0);
  gtk_frame_set_shadow_type (GTK_FRAME (frame2), GTK_SHADOW_NONE);

  alignment11 = gtk_alignment_new (0.5, 0.5, 1, 1);
  gtk_widget_show (alignment11);
  gtk_container_add (GTK_CONTAINER (frame2), alignment11);
  gtk_alignment_set_padding (GTK_ALIGNMENT (alignment11), 0, 0, 12, 0);

  vbox11 = gtk_vbox_new (FALSE, 0);
  gtk_widget_show (vbox11);
  gtk_container_add (GTK_CONTAINER (alignment11), vbox11);

  prefDetailedComponentInfo_checkbutton = gtk_check_button_new_with_mnemonic (_("Detailed component information"));
  gtk_widget_show (prefDetailedComponentInfo_checkbutton);
  gtk_box_pack_start (GTK_BOX (vbox11), prefDetailedComponentInfo_checkbutton, FALSE, FALSE, 0);
  gtk_tooltips_set_tip (tooltips, prefDetailedComponentInfo_checkbutton, _("Enables more detailed information for each component in the treeview, requires a restart of tupleview after changes."), NULL);

  tuplePrefFrame = gtk_label_new (_("<b>Tuples</b>"));
  gtk_widget_show (tuplePrefFrame);
  gtk_frame_set_label_widget (GTK_FRAME (frame2), tuplePrefFrame);
  gtk_label_set_use_markup (GTK_LABEL (tuplePrefFrame), TRUE);

  topologyPrefFrame = gtk_frame_new (NULL);
  gtk_widget_show (topologyPrefFrame);
  gtk_box_pack_start (GTK_BOX (vbox3), topologyPrefFrame, TRUE, TRUE, 0);
  gtk_frame_set_shadow_type (GTK_FRAME (topologyPrefFrame), GTK_SHADOW_NONE);

  alignment10 = gtk_alignment_new (0.5, 0.5, 1, 1);
  gtk_widget_show (alignment10);
  gtk_container_add (GTK_CONTAINER (topologyPrefFrame), alignment10);
  gtk_alignment_set_padding (GTK_ALIGNMENT (alignment10), 0, 0, 12, 0);

  vbox10 = gtk_vbox_new (FALSE, 0);
  gtk_widget_show (vbox10);
  gtk_container_add (GTK_CONTAINER (alignment10), vbox10);

  hbox15 = gtk_hbox_new (FALSE, 0);
  gtk_widget_show (hbox15);
  gtk_box_pack_start (GTK_BOX (vbox10), hbox15, TRUE, TRUE, 0);

  prefRenderingFormat = gtk_combo_box_new_text ();
  gtk_widget_show (prefRenderingFormat);
  gtk_box_pack_start (GTK_BOX (hbox15), prefRenderingFormat, FALSE, TRUE, 0);
  gtk_combo_box_append_text (GTK_COMBO_BOX (prefRenderingFormat), _("PNG"));
  gtk_combo_box_append_text (GTK_COMBO_BOX (prefRenderingFormat), _("SVG"));

  renderingFormatLabel = gtk_label_new (_(" rendering format"));
  gtk_widget_show (renderingFormatLabel);
  gtk_box_pack_start (GTK_BOX (hbox15), renderingFormatLabel, FALSE, FALSE, 0);

  prefExcludeTupleview_checkbutton = gtk_check_button_new_with_mnemonic (_("Exclude self"));
  gtk_widget_show (prefExcludeTupleview_checkbutton);
  gtk_box_pack_start (GTK_BOX (vbox10), prefExcludeTupleview_checkbutton, FALSE, FALSE, 0);
  gtk_tooltips_set_tip (tooltips, prefExcludeTupleview_checkbutton, _("Removes this tupleview from the ecology visualization"), NULL);

  prefExcludePeisInits_checkbutton = gtk_check_button_new_with_mnemonic (_("Exclude peisinits (only subscriptions)"));
  gtk_widget_show (prefExcludePeisInits_checkbutton);
  gtk_box_pack_start (GTK_BOX (vbox10), prefExcludePeisInits_checkbutton, FALSE, FALSE, 0);

  prefCopyTopologyImages_checkbutton = gtk_check_button_new_with_mnemonic (_("Record images"));
  gtk_widget_show (prefCopyTopologyImages_checkbutton);
  gtk_box_pack_start (GTK_BOX (vbox10), prefCopyTopologyImages_checkbutton, FALSE, FALSE, 0);
  gtk_tooltips_set_tip (tooltips, prefCopyTopologyImages_checkbutton, _("Saves all rendered ecology views to disk as images"), NULL);

  prefCopyDotFiles_checkbutton = gtk_check_button_new_with_mnemonic (_("Record dot files"));
  gtk_widget_show (prefCopyDotFiles_checkbutton);
  gtk_box_pack_start (GTK_BOX (vbox10), prefCopyDotFiles_checkbutton, FALSE, FALSE, 0);
  gtk_tooltips_set_tip (tooltips, prefCopyDotFiles_checkbutton, _("Saves all rendered ecology views to disk as a raw DOT file"), NULL);

  hbox16 = gtk_hbox_new (FALSE, 0);
  gtk_widget_show (hbox16);
  gtk_box_pack_start (GTK_BOX (vbox10), hbox16, FALSE, FALSE, 0);

  prefImageDotFileLabeling_combobox = gtk_combo_box_new_text ();
  gtk_widget_show (prefImageDotFileLabeling_combobox);
  gtk_box_pack_start (GTK_BOX (hbox16), prefImageDotFileLabeling_combobox, FALSE, TRUE, 0);
  gtk_combo_box_append_text (GTK_COMBO_BOX (prefImageDotFileLabeling_combobox), _("Date"));
  gtk_combo_box_append_text (GTK_COMBO_BOX (prefImageDotFileLabeling_combobox), _("Counter"));

  imageDotFile_label = gtk_label_new (_(" Image/dot-file labeling"));
  gtk_widget_show (imageDotFile_label);
  gtk_box_pack_start (GTK_BOX (hbox16), imageDotFile_label, FALSE, FALSE, 0);

  prefUpdateTopologyView_checkbutton = gtk_check_button_new_with_mnemonic (_("Update topology view"));
  gtk_widget_show (prefUpdateTopologyView_checkbutton);
  gtk_box_pack_start (GTK_BOX (vbox10), prefUpdateTopologyView_checkbutton, FALSE, FALSE, 0);

  label10 = gtk_label_new (_("<b>Ecology </b>"));
  gtk_widget_show (label10);
  gtk_frame_set_label_widget (GTK_FRAME (topologyPrefFrame), label10);
  gtk_label_set_use_markup (GTK_LABEL (label10), TRUE);

  hbox5 = gtk_hbox_new (FALSE, 0);
  gtk_widget_show (hbox5);
  gtk_box_pack_start (GTK_BOX (vbox3), hbox5, FALSE, FALSE, 0);

  prefOK = gtk_button_new_with_mnemonic (_("OK"));
  gtk_widget_show (prefOK);
  gtk_box_pack_start (GTK_BOX (hbox5), prefOK, TRUE, FALSE, 0);

  prefCancel = gtk_button_new_with_mnemonic (_("Cancel"));
  gtk_widget_show (prefCancel);
  gtk_box_pack_start (GTK_BOX (hbox5), prefCancel, TRUE, FALSE, 0);

  statusbar1 = gtk_statusbar_new ();
  gtk_widget_show (statusbar1);
  gtk_box_pack_start (GTK_BOX (vbox3), statusbar1, FALSE, FALSE, 0);

  g_signal_connect ((gpointer) prefOK, "clicked",
                    G_CALLBACK (on_prefOK_clicked),
                    NULL);
  g_signal_connect ((gpointer) prefCancel, "clicked",
                    G_CALLBACK (on_prefCancel_clicked),
                    NULL);

  /* Store pointers to all widgets, for use by lookup_widget(). */
  GLADE_HOOKUP_OBJECT_NO_REF (preferencesWindow, preferencesWindow, "preferencesWindow");
  GLADE_HOOKUP_OBJECT (preferencesWindow, vbox3, "vbox3");
  GLADE_HOOKUP_OBJECT (preferencesWindow, table4, "table4");
  GLADE_HOOKUP_OBJECT (preferencesWindow, preferencesCaptionLabel, "preferencesCaptionLabel");
  GLADE_HOOKUP_OBJECT (preferencesWindow, image14, "image14");
  GLADE_HOOKUP_OBJECT (preferencesWindow, frame2, "frame2");
  GLADE_HOOKUP_OBJECT (preferencesWindow, alignment11, "alignment11");
  GLADE_HOOKUP_OBJECT (preferencesWindow, vbox11, "vbox11");
  GLADE_HOOKUP_OBJECT (preferencesWindow, prefDetailedComponentInfo_checkbutton, "prefDetailedComponentInfo_checkbutton");
  GLADE_HOOKUP_OBJECT (preferencesWindow, tuplePrefFrame, "tuplePrefFrame");
  GLADE_HOOKUP_OBJECT (preferencesWindow, topologyPrefFrame, "topologyPrefFrame");
  GLADE_HOOKUP_OBJECT (preferencesWindow, alignment10, "alignment10");
  GLADE_HOOKUP_OBJECT (preferencesWindow, vbox10, "vbox10");
  GLADE_HOOKUP_OBJECT (preferencesWindow, hbox15, "hbox15");
  GLADE_HOOKUP_OBJECT (preferencesWindow, prefRenderingFormat, "prefRenderingFormat");
  GLADE_HOOKUP_OBJECT (preferencesWindow, renderingFormatLabel, "renderingFormatLabel");
  GLADE_HOOKUP_OBJECT (preferencesWindow, prefExcludeTupleview_checkbutton, "prefExcludeTupleview_checkbutton");
  GLADE_HOOKUP_OBJECT (preferencesWindow, prefExcludePeisInits_checkbutton, "prefExcludePeisInits_checkbutton");
  GLADE_HOOKUP_OBJECT (preferencesWindow, prefCopyTopologyImages_checkbutton, "prefCopyTopologyImages_checkbutton");
  GLADE_HOOKUP_OBJECT (preferencesWindow, prefCopyDotFiles_checkbutton, "prefCopyDotFiles_checkbutton");
  GLADE_HOOKUP_OBJECT (preferencesWindow, hbox16, "hbox16");
  GLADE_HOOKUP_OBJECT (preferencesWindow, prefImageDotFileLabeling_combobox, "prefImageDotFileLabeling_combobox");
  GLADE_HOOKUP_OBJECT (preferencesWindow, imageDotFile_label, "imageDotFile_label");
  GLADE_HOOKUP_OBJECT (preferencesWindow, prefUpdateTopologyView_checkbutton, "prefUpdateTopologyView_checkbutton");
  GLADE_HOOKUP_OBJECT (preferencesWindow, label10, "label10");
  GLADE_HOOKUP_OBJECT (preferencesWindow, hbox5, "hbox5");
  GLADE_HOOKUP_OBJECT (preferencesWindow, prefOK, "prefOK");
  GLADE_HOOKUP_OBJECT (preferencesWindow, prefCancel, "prefCancel");
  GLADE_HOOKUP_OBJECT (preferencesWindow, statusbar1, "statusbar1");
  GLADE_HOOKUP_OBJECT_NO_REF (preferencesWindow, tooltips, "tooltips");

  return preferencesWindow;
}

GtkWidget*
create_connectDialogue (void)
{
  GtkWidget *connectDialogue;
  GtkWidget *dialog_vbox1;
  GtkWidget *hbox14;
  GtkWidget *labelURL;
  GtkWidget *connectDialogueURLEntry;
  GtkWidget *dialog_action_area1;
  GtkWidget *connectDialogueCancelButton;
  GtkWidget *connectDialogueOkButton;

  connectDialogue = gtk_dialog_new ();
  gtk_window_set_title (GTK_WINDOW (connectDialogue), _("PEIS Connect"));
  gtk_window_set_position (GTK_WINDOW (connectDialogue), GTK_WIN_POS_MOUSE);
  gtk_window_set_type_hint (GTK_WINDOW (connectDialogue), GDK_WINDOW_TYPE_HINT_DIALOG);

  dialog_vbox1 = GTK_DIALOG (connectDialogue)->vbox;
  gtk_widget_show (dialog_vbox1);

  hbox14 = gtk_hbox_new (FALSE, 0);
  gtk_widget_show (hbox14);
  gtk_box_pack_start (GTK_BOX (dialog_vbox1), hbox14, TRUE, TRUE, 0);

  labelURL = gtk_label_new (_("Connect to: "));
  gtk_widget_show (labelURL);
  gtk_box_pack_start (GTK_BOX (hbox14), labelURL, FALSE, FALSE, 0);

  connectDialogueURLEntry = gtk_combo_box_entry_new_text ();
  gtk_widget_show (connectDialogueURLEntry);
  gtk_box_pack_start (GTK_BOX (hbox14), connectDialogueURLEntry, TRUE, TRUE, 0);

  dialog_action_area1 = GTK_DIALOG (connectDialogue)->action_area;
  gtk_widget_show (dialog_action_area1);
  gtk_button_box_set_layout (GTK_BUTTON_BOX (dialog_action_area1), GTK_BUTTONBOX_END);

  connectDialogueCancelButton = gtk_button_new_from_stock ("gtk-cancel");
  gtk_widget_show (connectDialogueCancelButton);
  gtk_dialog_add_action_widget (GTK_DIALOG (connectDialogue), connectDialogueCancelButton, GTK_RESPONSE_CANCEL);
  GTK_WIDGET_SET_FLAGS (connectDialogueCancelButton, GTK_CAN_DEFAULT);

  connectDialogueOkButton = gtk_button_new_from_stock ("gtk-ok");
  gtk_widget_show (connectDialogueOkButton);
  gtk_dialog_add_action_widget (GTK_DIALOG (connectDialogue), connectDialogueOkButton, GTK_RESPONSE_OK);
  GTK_WIDGET_SET_FLAGS (connectDialogueOkButton, GTK_CAN_DEFAULT);

  g_signal_connect ((gpointer) connectDialogue, "close",
                    G_CALLBACK (on_connectDialogue_close),
                    NULL);
  g_signal_connect ((gpointer) connectDialogueCancelButton, "clicked",
                    G_CALLBACK (on_connectDialogueCancelButton_clicked),
                    NULL);
  g_signal_connect ((gpointer) connectDialogueOkButton, "clicked",
                    G_CALLBACK (on_connectDialogueOkButton_clicked),
                    NULL);

  /* Store pointers to all widgets, for use by lookup_widget(). */
  GLADE_HOOKUP_OBJECT_NO_REF (connectDialogue, connectDialogue, "connectDialogue");
  GLADE_HOOKUP_OBJECT_NO_REF (connectDialogue, dialog_vbox1, "dialog_vbox1");
  GLADE_HOOKUP_OBJECT (connectDialogue, hbox14, "hbox14");
  GLADE_HOOKUP_OBJECT (connectDialogue, labelURL, "labelURL");
  GLADE_HOOKUP_OBJECT (connectDialogue, connectDialogueURLEntry, "connectDialogueURLEntry");
  GLADE_HOOKUP_OBJECT_NO_REF (connectDialogue, dialog_action_area1, "dialog_action_area1");
  GLADE_HOOKUP_OBJECT (connectDialogue, connectDialogueCancelButton, "connectDialogueCancelButton");
  GLADE_HOOKUP_OBJECT (connectDialogue, connectDialogueOkButton, "connectDialogueOkButton");

  return connectDialogue;
}

GtkWidget*
create_menu1 (void)
{
  GtkWidget *menu1;
  GtkWidget *no1;
  GtkWidget *item1;
  GtkWidget *image25;
  GtkAccelGroup *accel_group;

  accel_group = gtk_accel_group_new ();

  menu1 = gtk_menu_new ();

  no1 = gtk_image_menu_item_new_from_stock ("gtk-no", accel_group);
  gtk_widget_show (no1);
  gtk_container_add (GTK_CONTAINER (menu1), no1);

  item1 = gtk_image_menu_item_new_with_mnemonic (_("item1"));
  gtk_widget_show (item1);
  gtk_container_add (GTK_CONTAINER (menu1), item1);

  image25 = gtk_image_new_from_stock ("gtk-fullscreen", GTK_ICON_SIZE_MENU);
  gtk_widget_show (image25);
  gtk_image_menu_item_set_image (GTK_IMAGE_MENU_ITEM (item1), image25);

  g_signal_connect ((gpointer) menu1, "delete_event",
                    G_CALLBACK (on_menu1_delete_event),
                    NULL);
  g_signal_connect ((gpointer) menu1, "destroy_event",
                    G_CALLBACK (on_menu1_destroy_event),
                    NULL);
  g_signal_connect ((gpointer) no1, "activate",
                    G_CALLBACK (on_no1_activate),
                    NULL);
  g_signal_connect ((gpointer) item1, "activate",
                    G_CALLBACK (on_item1_activate),
                    NULL);

  /* Store pointers to all widgets, for use by lookup_widget(). */
  GLADE_HOOKUP_OBJECT_NO_REF (menu1, menu1, "menu1");
  GLADE_HOOKUP_OBJECT (menu1, no1, "no1");
  GLADE_HOOKUP_OBJECT (menu1, item1, "item1");
  GLADE_HOOKUP_OBJECT (menu1, image25, "image25");

  gtk_menu_set_accel_group (GTK_MENU (menu1), accel_group);

  return menu1;
}

GtkWidget*
create_tupleFileNameDialog (void)
{
  GtkWidget *tupleFileNameDialog;
  GtkWidget *dialog_vbox2;
  GtkWidget *dialog_action_area2;
  GtkWidget *button1;
  GtkWidget *ok_button_tuplefilename_dialog;

  tupleFileNameDialog = gtk_file_chooser_dialog_new ("", NULL, GTK_FILE_CHOOSER_ACTION_OPEN, NULL);
  gtk_window_set_type_hint (GTK_WINDOW (tupleFileNameDialog), GDK_WINDOW_TYPE_HINT_DIALOG);

  dialog_vbox2 = GTK_DIALOG (tupleFileNameDialog)->vbox;
  gtk_widget_show (dialog_vbox2);

  dialog_action_area2 = GTK_DIALOG (tupleFileNameDialog)->action_area;
  gtk_widget_show (dialog_action_area2);
  gtk_button_box_set_layout (GTK_BUTTON_BOX (dialog_action_area2), GTK_BUTTONBOX_END);

  button1 = gtk_button_new_from_stock ("gtk-cancel");
  gtk_widget_show (button1);
  gtk_dialog_add_action_widget (GTK_DIALOG (tupleFileNameDialog), button1, GTK_RESPONSE_CANCEL);
  GTK_WIDGET_SET_FLAGS (button1, GTK_CAN_DEFAULT);

  ok_button_tuplefilename_dialog = gtk_button_new_from_stock ("gtk-open");
  gtk_widget_show (ok_button_tuplefilename_dialog);
  gtk_dialog_add_action_widget (GTK_DIALOG (tupleFileNameDialog), ok_button_tuplefilename_dialog, GTK_RESPONSE_OK);
  GTK_WIDGET_SET_FLAGS (ok_button_tuplefilename_dialog, GTK_CAN_DEFAULT);

  g_signal_connect ((gpointer) tupleFileNameDialog, "close",
                    G_CALLBACK (on_tupleFileNameDialog_close),
                    NULL);
  g_signal_connect ((gpointer) ok_button_tuplefilename_dialog, "pressed",
                    G_CALLBACK (on_ok_button_tuplefilename_dialog_pressed),
                    NULL);

  /* Store pointers to all widgets, for use by lookup_widget(). */
  GLADE_HOOKUP_OBJECT_NO_REF (tupleFileNameDialog, tupleFileNameDialog, "tupleFileNameDialog");
  GLADE_HOOKUP_OBJECT_NO_REF (tupleFileNameDialog, dialog_vbox2, "dialog_vbox2");
  GLADE_HOOKUP_OBJECT_NO_REF (tupleFileNameDialog, dialog_action_area2, "dialog_action_area2");
  GLADE_HOOKUP_OBJECT (tupleFileNameDialog, button1, "button1");
  GLADE_HOOKUP_OBJECT (tupleFileNameDialog, ok_button_tuplefilename_dialog, "ok_button_tuplefilename_dialog");

  gtk_widget_grab_default (ok_button_tuplefilename_dialog);
  return tupleFileNameDialog;
}

